--- a/components/profile_db.py+++ b/components/profile_db.py@@ -6,6 +6,35 @@ 
 # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î —Ä—è–¥–æ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
 DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'user_profiles.db'))
+
+# NEW: safe profile reset helper
+def clear_user_profile(chat_id: int) -> None:
+    \"\"\"–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É –ª–∏–±–æ —Å–æ–∑–¥–∞–≤–∞—è –ø—É—Å—Ç—É—é).\"\"\"
+    conn = sqlite3.connect(DB_PATH)
+    cur = conn.cursor()
+    cur.execute(\"SELECT 1 FROM user_profiles WHERE chat_id = ?\", (chat_id,))
+    exists = cur.fetchone() is not None
+    if exists:
+        cur.execute(
+            \"\"\"
+            UPDATE user_profiles
+            SET name=NULL, interface_lang=NULL, target_lang=NULL, level=NULL, style=NULL,
+                promo_code_used=NULL, promo_type=NULL, promo_activated_at=NULL, promo_days=NULL
+            WHERE chat_id=?
+            \"\"\",
+            (chat_id,),
+        )
+    else:
+        cur.execute(
+            \"\"\"
+            INSERT INTO user_profiles (chat_id)
+            VALUES (?)
+            \"\"\",
+            (chat_id,),
+        )
+    conn.commit()
+    conn.close()
+
 
 
 def init_db() -> None:

--- a/handlers/commands/reset.py+++ b/handlers/commands/reset.py@@ -2,11 +2,17 @@ from telegram.ext import ContextTypes
 from config.config import ADMINS
 from state.session import user_sessions
+from components.profile_db import clear_user_profile  # NEW: reset DB profile
 
 async def reset_command(update, context):
     chat_id = update.effective_chat.id
     if chat_id in ADMINS:
-        user_sessions[chat_id] = {}  # –°–±—Ä–æ—Å –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
-        await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
+        user_sessions[chat_id] = {}  # keep: reset in-memory session
+        try:
+            context.user_data.clear()  # NEW: clear user_data cache
+        except Exception:
+            pass
+        clear_user_profile(chat_id)   # NEW: clear DB profile
+        await update.message.reply_text("–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã.")
     else:
         await update.message.reply_text("‚õîÔ∏è")

--- a/handlers/settings.py+++ b/handlers/settings.py@@ -75,7 +75,7 @@     return text
 
 
-def _menu_keyboard(ui: str) -> InlineKeyboardMarkup:
+def _menu_keyboard(ui: str, has_pending: bool = False) -> InlineKeyboardMarkup:  # NEW: has_pending flag
     return InlineKeyboardMarkup([
         [
             InlineKeyboardButton("üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫" if ui == "ru" else "üåê Change language",
@@ -246,3 +246,26 @@             reply_markup=_menu_keyboard(ui),
         )
         return
+
+    # NEW: confirm and persist pending changes
+    if data == "SETTINGS:CONFIRM":
+        pending = (context.user_data or {}).get("pending_changes") or {}
+        if pending:
+            save_user_profile(
+                chat_id,
+                target_lang=pending.get("target_lang"),
+                level=pending.get("level"),
+                style=pending.get("style"),
+            )
+            context.user_data["pending_changes"] = {}
+        p = get_user_profile(chat_id) or {}
+        language = p.get("target_lang") or "en"
+        level = p.get("level") or "B1"
+        style = p.get("style") or "neutral"
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui, has_pending=False),
+        )
+        await q.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ" if ui == "ru" else "Saved")
+        return

--- a/english_bot.py+++ b/english_bot.py@@ -23,6 +23,8 @@ 
 from config.config import TELEGRAM_TOKEN, WEBHOOK_SECRET_PATH
 from components.profile_db import init_db
+from components.profile_db import get_user_profile, set_user_promo  # NEW
+from components.promo import normalize_code, check_promo_code, activate_promo  # NEW
 from components.onboarding import send_onboarding
 from handlers.conversation_callback import handle_callback_query
 from handlers.commands.admin import admin_command
@@ -174,6 +176,60 @@         bot_app.add_handler(CallbackQueryHandler(handle_callback_query), group=1)
 
         # 4) –°–æ–æ–±—â–µ–Ω–∏—è
+        # NEW: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–∏–¥—ë—Ç –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
+        async def _promo_text_handler(update, context):
+            if not getattr(update, 'message', None):
+                return
+            if not context.user_data.get('awaiting_promo'):
+                return
+            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
+            context.user_data['awaiting_promo'] = False
+
+            code_raw = (update.message.text or '').strip()
+            code = normalize_code(code_raw)  # NEW: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
+
+            chat_id = update.effective_chat.id
+            profile = get_user_profile(chat_id) or {'chat_id': chat_id}
+
+            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
+            if not check_promo_code(code):
+                ui = (profile.get('interface_lang') or 'ru')
+                await update.message.reply_text('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üòï' if ui == 'ru' else 'Promo code not found üòï')
+                return
+
+            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è (–≤ –ø–∞–º—è—Ç–∏) -> –∑–∞–ø–æ–ª–Ω–∏—Ç promo_* –ø–æ–ª—è –≤ profile
+            ok, reason = activate_promo(profile, code)
+            if not ok and reason == 'already_used':
+                ui = (profile.get('interface_lang') or 'ru')
+                await update.message.reply_text('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.' if ui == 'ru' else 'Promo was already used.')
+                return
+
+            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
+            activated_at = profile.get('promo_activated_at')
+            days = profile.get('promo_days')
+            set_user_promo(chat_id, code, profile.get('promo_type'), activated_at, days)  # NEW
+
+            # –û—Ç–≤–µ—Ç —Å –æ—Å—Ç–∞—Ç–∫–æ–º –¥–Ω–µ–π, –µ—Å–ª–∏ timed
+            ui = (profile.get('interface_lang') or 'ru')
+            if profile.get('promo_type') == 'timed' and activated_at and days:
+                from datetime import datetime, timedelta, timezone
+                try:
+                    start = datetime.fromisoformat(activated_at)
+                    if start.tzinfo is None:
+                        start = start.replace(tzinfo=timezone.utc)
+                    end = start + timedelta(days=int(days))
+                    remain = end - datetime.now(timezone.utc)
+                    days_left = max(0, remain.days)
+                    msg = f'–ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å ~{days_left} –¥–Ω.' if ui == 'ru' else f'Promo activated! ~{days_left}d left.'
+                except Exception:
+                    msg = '–ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!' if ui == 'ru' else 'Promo activated!'
+            elif profile.get('promo_type') == 'english_only':
+                msg = '–ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: English-only —Ä–µ–∂–∏–º.' if ui == 'ru' else 'Promo activated: English-only mode.'
+            else:
+                msg = '–ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!' if ui == 'ru' else 'Promo activated!'
+            await update.message.reply_text(msg)
+
+        bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _promo_text_handler), group=0)  # NEW
         bot_app.add_handler(MessageHandler((filters.TEXT | filters.VOICE) & ~filters.COMMAND, handle_message))
 
         # 5) –ú—è–≥–∫–æ —É–±–∏—Ä–∞–µ–º –ª—é–±—É—é ReplyKeyboard –ø–æ—Å–ª–µ /start
@@ -270,4 +326,4 @@         return {"ok": True}
     except Exception:
         logger.exception("Error while processing update")
-        return JSONResponse({"ok": False, "error": "processing error"}, status_code=500)
+        return JSONResponse({"ok": False, "error": "processing error"}, status_code=500)
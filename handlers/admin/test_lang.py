# admin/test_lang.py
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from utils.decorators import safe_handler

from handlers.chat.prompt_templates import pick_intro_question
from components.translator import do_translate
from components.voice import synthesize_voice

import logging
import os

logger = logging.getLogger(__name__)


@safe_handler
async def test_lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —è–∑—ã–∫: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã, –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–∑–≤—É—á–∫—É.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
      /test_lang it   ‚Äî –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π
      /test_lang pt   ‚Äî –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π (üáßüá∑ –≤–∞—Ä–∏–∞–Ω—Ç)
    """
    chat_id = update.effective_chat.id
    args = context.args or []

    if not args:
        await update.message.reply_text(
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_lang <–∫–æ–¥_—è–∑—ã–∫–∞>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /test_lang it ‚Äî üáÆüáπ Italiano\n"
            "‚Ä¢ /test_lang pt ‚Äî üáßüá∑ Portugu√™s (Brasil)"
        )
        return

    lang_code = args[0].lower().strip()
    level = "A2"
    style = "casual"

    await update.message.reply_text(
        f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞: `{lang_code}`", parse_mode="Markdown"
    )

    try:
        # 1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
        question = pick_intro_question(level=level, style=style, lang=lang_code)
        await context.bot.send_message(chat_id=chat_id, text=f"üó£Ô∏è –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã:\n{question}")

        # 2Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ (–Ω–∞ —Ä—É—Å—Å–∫–∏–π)
        translation = await do_translate(
            text=question,
            interface_lang="ru",
            target_lang=lang_code,
            direction="target‚Üíui",
            style=style,
            level=level,
        )
        await context.bot.send_message(chat_id=chat_id, text=f"üí¨ –ü–µ—Ä–µ–≤–æ–¥:\n{translation}")

        # 3Ô∏è‚É£ –û–∑–≤—É—á–∫–∞ (TTS)
        try:
            audio_path = synthesize_voice(
                text=question,
                language_code=lang_code,
                style=style,
                level=level,
            )

            if audio_path and os.path.exists(audio_path):
                with open(audio_path, "rb") as f:
                    await context.bot.send_voice(chat_id=chat_id, voice=f)
                os.remove(audio_path)
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üéß –û–∑–≤—É—á–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞.",
                )
        except Exception as e:
            logger.exception("TTS test failed")
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")

    except Exception as e:
        logger.exception("test_lang_command failed")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å register_admin_handlers)
def register_test_lang(application):
    application.add_handler(CommandHandler("test_lang", test_lang_command))

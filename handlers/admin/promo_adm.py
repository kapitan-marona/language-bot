# handlers/admin/promo_adm.py
from __future__ import annotations
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from components.admins import ADMIN_IDS
# >>> CHANGED: –∏—Å–ø–æ–ª—å–∑—É–µ–º config_store –≤–º–µ—Å—Ç–æ promo_store
from components.config_store import get_kv, set_kv  # >>> ADDED
from datetime import datetime  # >>> ADDED

ALLOWED_TYPES = {"general", "lang_limited", "trial", "discount", "special"}  # >>> ADDED

def _is_admin(update: Update) -> bool:
    u = update.effective_user
    return bool(u and u.id in ADMIN_IDS)

def _kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï Add/Update", callback_data="ADM:PROMO:ADD")],
        [InlineKeyboardButton("üóë Delete", callback_data="ADM:PROMO:DEL")],
        [InlineKeyboardButton("üîÅ Refresh", callback_data="ADM:PROMO")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="ADM:BACK")],
    ])

def _list_lines(max_items: int = 50) -> list[str]:  # >>> ADDED
    d = get_kv("__promos__", {}) or {}              # >>> ADDED (–∫—ç—à —Å–ø–∏—Å–∫–∞) ‚Äî –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    # –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∫–ª—é—á–∞–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –±–µ–∑ FS-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    # –≤ –Ω–∞—à–µ–º –ø—Ä–æ—Å—Ç–æ–º KV ‚Äî –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –≤ __promos__
    lines = []                                      # >>> ADDED
    try:
        codes = sorted(d.keys()) if isinstance(d, dict) else []
        for c in codes[:max_items]:
            info = get_kv(f"promo:{c}", {}) or {}
            langs = (info.get("allowed_langs") or "") or "‚Äî"
            exp   = (info.get("date") or "") or "‚Äî"
            typ   = info.get("type") or "‚Äî"
            days  = int(info.get("days") or 0)
            msgs  = int(info.get("messages") or 0)
            limit = int(info.get("limit") or 0)
            used  = int(info.get("used") or 0)
            lines.append(f"‚Ä¢ <b>{c}</b> ‚Äî {typ}; days={days}; msg={msgs}; exp={exp}; limit={limit}; used={used}; langs:{langs}")
    except Exception:
        pass
    return lines

async def promo_entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q:
        await q.answer()
    if not _is_admin(update):
        if q:
            await q.edit_message_text("‚õîÔ∏è")
        else:
            await update.message.reply_text("‚õîÔ∏è")
        return

    lines = _list_lines()
    text = "üéü <b>Promo codes</b>\n" + ("\n".join(lines) if lines else "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤.")
    if q:
        await q.edit_message_text(text, parse_mode="HTML", reply_markup=_kb())
    else:
        await update.message.reply_html(text, reply_markup=_kb())

async def promo_router(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "ADM:PROMO:ADD":
        ctx.user_data["adm_promo_mode"] = "ADD"
        await q.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:\n"
            "<code>CODE;TYPE;DAYS;MESSAGES;DATE;LIMIT;ALLOWED_LANGS</code>\n"
            "TYPE: general|lang_limited|trial|discount|special\n"
            "DATE: YYYY-MM-DD –∏–ª–∏ 0; ALLOWED_LANGS: 0 –∏–ª–∏ CSV (en,de)\n"
            "–ü—Ä–∏–º–µ—Ä: <code>best50;trial;0;100;0;50;0</code>",
            parse_mode="HTML",
            reply_markup=_kb()
        )
    elif q.data == "ADM:PROMO:DEL":
        ctx.user_data["adm_promo_mode"] = "DEL"
        await q.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç:\n<code>DEL CODE</code>", parse_mode="HTML", reply_markup=_kb())
    else:
        await promo_entry(update, ctx)

def _norm_date(s: str) -> str:  # >>> ADDED
    s = (s or "").strip()
    if not s or s == "0":
        return ""
    try:
        datetime.strptime(s, "%Y-%m-%d")
        return s
    except Exception:
        return ""

# –õ–æ–≤–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–µ–ø–ª–∏–∫—É –æ—Ç –∞–¥–º–∏–Ω–∞ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ english_bot.py)
async def promo_text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    mode = ctx.user_data.get("adm_promo_mode")
    if not mode:
        return  # –Ω–µ –Ω–∞—à –≤–≤–æ–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    if not (update.effective_user and update.effective_user.id in ADMIN_IDS):
        return

    txt = (update.message.text or "").strip()
    try:
        if mode == "ADD":
            parts = [x.strip() for x in txt.split(";", 6)]
            if len(parts) < 7:
                await update.message.reply_text(
                    "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: CODE;TYPE;DAYS;MESSAGES;DATE;LIMIT;ALLOWED_LANGS\n"
                    "–ü—Ä–∏–º–µ—Ä: best50;trial;0;100;0;50;0"
                )
                return

            code, typ, days, messages, date_iso, limit, langs = parts
            typ = typ.lower()
            if typ not in ALLOWED_TYPES:
                await update.message.reply_text("‚ö†Ô∏è TYPE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: general|lang_limited|trial|discount|special")
                return

            def _to_int(s): 
                try: return int((s or "0").strip() or 0)
                except: return 0

            days_i = _to_int(days)
            msgs_i = _to_int(messages)
            date_s = _norm_date(date_iso)
            limit_i = _to_int(limit)
            langs_s = (langs or "").strip().lower()
            langs_s = "" if langs_s in {"0", "-"} else langs_s.replace(";", ",").replace(" ", "")

            key = f"promo:{code.lower()}"
            data = get_kv(key, {}) or {}
            data.update({
                "type": typ,
                "days": days_i,
                "messages": msgs_i,
                "date": date_s,           # YYYY-MM-DD –∏–ª–∏ ""
                "limit": limit_i,
                "used": int(data.get("used") or 0),
                "allowed_langs": langs_s, # CSV –∏–ª–∏ ""
            })
            set_kv(key, data)

            # –≤–µ–¥—ë–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∞
            lst = get_kv("__promos__", {}) or {}
            lst[code.lower()] = True
            set_kv("__promos__", lst)

            await update.message.reply_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        elif mode == "DEL":
            parts = txt.split()
            if len(parts) == 2 and parts[0].upper() == "DEL":
                key = f"promo:{parts[1].lower()}"
                set_kv(key, None)  # –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ get_kv/ set_kv –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç None ‚Üí –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —è–≤–Ω—É—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å {})
                lst = get_kv("__promos__", {}) or {}
                if parts[1].lower() in lst:
                    lst.pop(parts[1].lower(), None)
                    set_kv("__promos__", lst)
                await update.message.reply_text("üóë –£–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).")
            else:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: DEL CODE")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        ctx.user_data.pop("adm_promo_mode", None)

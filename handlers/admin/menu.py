from __future__ import annotations
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from components.admins import ADMIN_IDS
from handlers.commands import admin_cmds

# –ü—Ä–æ—Å—Ç–æ–π —á–µ–∫ –ø—Ä–∞–≤
def _is_admin(update: Update) -> bool:
    u = update.effective_user
    return bool(u and u.id in ADMIN_IDS)

def _menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ Broadcast", callback_data="ADM:BROAD")],
        [InlineKeyboardButton("üéü Promo_adm", callback_data="ADM:PROMO")],
        [InlineKeyboardButton("üí∞ Price", callback_data="ADM:PRICE")],
        [InlineKeyboardButton("üë• Users", callback_data="ADM:USERS")],
        [InlineKeyboardButton("üß™ Test_lang", callback_data="ADM:TESTLANG")],
        [InlineKeyboardButton("üìä Stats", callback_data="ADM:STATS")],
    ])

async def admin_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await update.message.reply_text("üëë Admin Panel", reply_markup=_menu_kb())

async def admin_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "ADM:BROAD":
        await q.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å /broadcast <—Ç–µ–∫—Å—Ç> –∏–ª–∏ —Å–¥–µ–ª–∞–π reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–∏ /broadcast")
        return

    if data == "ADM:USERS":
        await admin_cmds.users_command(update, ctx)
        return

    if data == "ADM:STATS":
        await admin_cmds.stats_command(update, ctx)
        return

    if data == "ADM:TESTLANG":
        await q.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å–µ—Ö: /test_lang1025 <–∫–æ–¥>\n–ù–∞–ø—Ä.: /test_lang1025 pt")
        return

    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –ø–æ–¥-–º–æ–¥—É–ª–∏ –ø—Ä–æ–º–æ –∏ —Ü–µ–Ω
    if data.startswith("ADM:PROMO"):
        from handlers.admin.promo_adm import promo_entry, promo_router
        if data == "ADM:PROMO":
            await promo_entry(update, ctx)
        else:
            await promo_router(update, ctx)
        return

    if data.startswith("ADM:PRICE"):
        from handlers.admin.price_adm import price_entry, price_router
        if data == "ADM:PRICE":
            await price_entry(update, ctx)
        else:
            await price_router(update, ctx)
        return

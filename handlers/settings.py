# handlers/settings.py
from __future__ import annotations
from typing import List, Tuple
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from components.profile_db import get_user_profile, save_user_profile
from components.promo import restrict_target_languages_if_needed, is_promo_valid
# (–∏–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–∏; –ø—Ä–æ–º–æ-–æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –¥–µ–ª–∞–µ–º –≤ english_bot.py)

logger = logging.getLogger(__name__)

# –Ø–∑—ã–∫–∏ (—Ñ–ª–∞–≥ + –Ω–∞–∑–≤–∞–Ω–∏–µ)
LANGS: List[Tuple[str, str]] = [
    ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
    ("üá¨üáß English", "en"),
    ("üá´üá∑ Fran√ßais", "fr"),
    ("üá™üá∏ Espa√±ol", "es"),
    ("üá©üá™ Deutsch", "de"),
    ("üá∏üá™ Svenska", "sv"),
    ("üá´üáÆ Suomi", "fi"),
]

# –£—Ä–æ–≤–Ω–∏
LEVELS_ROW1 = ["A0", "A1", "A2"]
LEVELS_ROW2 = ["B1", "B2", "C1", "C2"]

# –°—Ç–∏–ª–∏
STYLES: List[Tuple[str, str]] = [
    ("üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "casual"),
    ("ü§ì –î–µ–ª–æ–≤–æ–π", "business"),
]

def _ui_lang(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)."""
    try:
        return (context.user_data or {}).get("ui", "ru")
    except Exception:
        return "ru"

def _name_for_lang(code: str) -> str:
    m = {"ru":"–†—É—Å—Å–∫–∏–π","en":"English","fr":"Fran√ßais","es":"Espa√±ol","de":"Deutsch","sv":"Svenska","fi":"Suomi"}
    return m.get(code, code)

def _name_for_style(code: str) -> str:
    return {"casual":"–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π","business":"–î–µ–ª–æ–≤–æ–π"}.get(code, code)

def _main_menu_text(ui: str, language_name: str, level: str, style_name: str, english_only_note: bool) -> str:
    if ui == "ru":
        note = "\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø—Ä–æ–º–æ English-only)." if english_only_note else ""
        return f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–Ø–∑—ã–∫: {language_name}\n–£—Ä–æ–≤–µ–Ω—å: {level}\n–°—Ç–∏–ª—å: {style_name}{note}"
    else:
        note = "\n\n‚ö†Ô∏è Only English available (English-only promo)." if english_only_note else ""
        return f"‚öôÔ∏è Settings\nLanguage: {language_name}\nLevel: {level}\nStyle: {style_name}{note}"

def _lang_keyboard(ui: str) -> InlineKeyboardMarkup:
    btns = [[InlineKeyboardButton(title, callback_data=f"SET:LANG:{code}")]
            for (title, code) in LANGS]
    return InlineKeyboardMarkup(btns)

def _level_keyboard(ui: str) -> InlineKeyboardMarkup:
    btns = [
        [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW1],
        [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW2],
    ]
    return InlineKeyboardMarkup(btns)

def _style_keyboard(ui: str) -> InlineKeyboardMarkup:
    btns = [[InlineKeyboardButton(title, callback_data=f"SET:STYLE:{code}")]
            for (title, code) in STYLES]
    return InlineKeyboardMarkup(btns)

def _menu_keyboard(ui: str, has_pending: bool = False) -> InlineKeyboardMarkup:  # NEW: has_pending flag
    btns = [
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫ / Language" if ui == "ru" else "üåê Language / –Ø–∑—ã–∫", callback_data="SETTINGS:LANG")],
        [InlineKeyboardButton("üéØ –£—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "üéØ Level", callback_data="SETTINGS:LEVEL")],
        [InlineKeyboardButton("üé≠ –°—Ç–∏–ª—å" if ui == "ru" else "üé≠ Style", callback_data="SETTINGS:STYLE")],
        [InlineKeyboardButton("üè∑Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥" if ui == "ru" else "üè∑Ô∏è Promo", callback_data="SETTINGS:PROMO")],
    ]
    # NEW: show confirm button only if there are unsaved changes
    if has_pending:
        btns.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ" if ui == "ru" else "‚úÖ Done", callback_data="SETTINGS:CONFIRM")])
    return InlineKeyboardMarkup(btns)

# –í—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–µ—Ä–µ–∑ /help –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª)
async def settings_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui = _ui_lang(context)
    chat_id = update.effective_chat.id

    p = get_user_profile(chat_id) or {}
    s = context.user_data or {}

    language = p.get("target_lang") or s.get("language") or "en"   # NEW: DB ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
    level = p.get("level") or s.get("level") or "B1"                # NEW
    style = p.get("style") or s.get("style") or "neutral"           # NEW
    english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
    has_pending = bool((context.user_data or {}).get("pending_changes"))  # NEW

    await update.message.reply_text(
        _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
        reply_markup=_menu_keyboard(ui, has_pending),  # NEW: pass has_pending
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
async def settings_on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    ui = _ui_lang(context)
    chat_id = q.message.chat_id

    # –Ø–ó–´–ö
    if data.startswith("SET:LANG:"):
        lang_code = data.split(":", 2)[-1]
        pending = context.user_data.setdefault("pending_changes", {})  # NEW
        pending["target_lang"] = lang_code  # NEW
        await q.answer("–û–ö")  # NEW: defer save until CONFIRM

        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
        )
        return

    # –£–†–û–í–ï–ù–¨
    if data.startswith("SET:LEVEL:"):
        level = data.split(":", 2)[-1]
        pending = context.user_data.setdefault("pending_changes", {})  # NEW
        pending["level"] = level  # NEW
        await q.answer("–û–ö")  # NEW: defer save until CONFIRM

        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
        )
        return

    # –°–¢–ò–õ–¨
    if data.startswith("SET:STYLE:"):
        style = data.split(":", 2)[-1]
        pending = context.user_data.setdefault("pending_changes", {})  # NEW
        pending["style"] = style  # NEW
        await q.answer("–û–ö")  # NEW: defer save until CONFIRM

        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
        )
        return

    # ‚úÖ –ì–æ—Ç–æ–≤–æ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ pending –≤ –ë–î
    if data == "SETTINGS:CONFIRM":  # NEW
        pending = (context.user_data or {}).get("pending_changes") or {}  # NEW
        if pending:  # NEW
            save_user_profile(  # NEW
                chat_id,        # NEW
                target_lang=pending.get("target_lang"),  # NEW
                level=pending.get("level"),              # NEW
                style=pending.get("style"),              # NEW
            )  # NEW
            context.user_data["pending_changes"] = {}  # NEW
        p = get_user_profile(chat_id) or {}  # NEW
        language = p.get("target_lang") or "en"  # NEW
        level = p.get("level") or "B1"           # NEW
        style = p.get("style") or "neutral"      # NEW
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))  # NEW
        await q.edit_message_text(  # NEW
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),  # NEW
            reply_markup=_menu_keyboard(ui, has_pending=False),  # NEW
        )  # NEW
        await q.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ" if ui == "ru" else "Saved")  # NEW
        return  # NEW

    # –ü—Ä–æ–º–æ–∫–æ–¥ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
    if data == "SETTINGS:PROMO":
        await q.answer()
        context.user_data["awaiting_promo"] = True  # NEW: expect text promo code
        await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º:" if ui == "ru" else "Please type your promo code:")  # NEW
        return

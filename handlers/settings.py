from __future__ import annotations
from typing import List, Tuple
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from components.profile_db import get_user_profile, save_user_profile
from components.promo import restrict_target_languages_if_needed, is_promo_valid
from components.i18n import get_ui_lang
from state.session import user_sessions

logger = logging.getLogger(__name__)

# –Ø–∑—ã–∫–∏ (—Ñ–ª–∞–≥ + –Ω–∞–∑–≤–∞–Ω–∏–µ)
LANGS: List[Tuple[str, str]] = [
    ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
    ("üá¨üáß English", "en"),
    ("üá´üá∑ Fran√ßais", "fr"),
    ("üá™üá∏ Espa√±ol", "es"),
    ("üá©üá™ Deutsch", "de"),
    ("üá∏üá™ Svenska", "sv"),
    ("üá´üáÆ Suomi", "fi"),
]

# –£—Ä–æ–≤–Ω–∏ ‚Äî –∫–∞–∫ –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
LEVELS_ROW1 = ["A0", "A1", "A2"]
LEVELS_ROW2 = ["B1", "B2", "C1", "C2"]

# –î–≤–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è (–∫–æ–¥ ‚Üí –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
STYLE_TITLES = {
    "casual":   {"ru": "üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "en": "üòé Casual"},
    "business": {"ru": "ü§ì –î–µ–ª–æ–≤–æ–π",     "en": "ü§ì Business"},
}
STYLE_ORDER = ["casual", "business"]  # –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫

# ---------- helpers ----------

def _name_for_lang(code: str) -> str:
    for title, c in LANGS:
        if c == code:
            return title
    return code

def _name_for_style(code: str, ui: str) -> str:
    d = STYLE_TITLES.get(code, {})
    return d.get(ui, d.get("ru", code))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞

def _main_menu_text(ui: str, lang_name: str, level: str, style_name: str, english_only_note: bool, append_tr: bool) -> str:
    base_ru = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {lang_name}\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {style_name}\n"
        f"‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ: {'–í–∫–ª' if append_tr else '–í—ã–∫–ª'}\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?"
    )
    base_en = (
        "‚öôÔ∏è Settings\n\n"
        f"‚Ä¢ Language: {lang_name}\n"
        f"‚Ä¢ Level: {level}\n"
        f"‚Ä¢ Chat style: {style_name}\n"
        f"‚Ä¢ Show replies in native language: {'On' if append_tr else 'Off'}\n\n"
        "What do you want to change?"
    )
    text = base_ru if ui == "ru" else base_en
    if english_only_note:
        text += ("\n\n‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π, –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"
                 if ui == "ru" else
                 "\n\n‚ùó Promo is permanent and limits learning to English only")
    return text

def _menu_keyboard(ui: str, append_tr: bool) -> InlineKeyboardMarkup:
    # –°–Ω–∏–∑—É ‚Äî "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å..." –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∫–Ω–æ–ø–æ–∫
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–Ø–∑—ã–∫" if ui == "ru" else "Language",
                                 callback_data="SETTINGS:LANG"),
            InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "Level",
                                 callback_data="SETTINGS:LEVEL"),
        ],
        [
            InlineKeyboardButton("–°—Ç–∏–ª—å" if ui == "ru" else "Style",
                                 callback_data="SETTINGS:STYLE"),
        ],
        [
            InlineKeyboardButton(
                ("–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å: –í–∫–ª" if ui == "ru" else "Native: On") if append_tr
                else ("–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å: –í—ã–∫–ª" if ui == "ru" else "Native: Off"),
                callback_data="SETTINGS:APPEND_TR"
            )
        ],
        [
            InlineKeyboardButton(
                "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" if ui == "ru" else "‚ñ∂Ô∏è Continue",
                callback_data="SETTINGS:APPLY"
            )
        ],
    ])

def _langs_keyboard(chat_id: int, ui: str) -> InlineKeyboardMarkup:
    prof = get_user_profile(chat_id) or {}
    lang_map = {code: title for title, code in LANGS}
    lang_map = restrict_target_languages_if_needed(prof, lang_map)

    items = [(title, code) for code, title in lang_map.items()]
    rows = []
    for i in range(0, len(items), 2):
        chunk = items[i:i+2]
        rows.append([InlineKeyboardButton(t, callback_data=f"SET:LANG:{c}") for (t, c) in chunk])

    rows.append([InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")])
    return InlineKeyboardMarkup(rows)

def _levels_keyboard(ui: str) -> InlineKeyboardMarkup:
    row1 = [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW1]
    row2 = [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW2]
    back = [InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")]
    return InlineKeyboardMarkup([row1, row2, back])

def _styles_keyboard(ui: str) -> InlineKeyboardMarkup:
    rows = []
    for code in STYLE_ORDER:
        title = _name_for_style(code, ui)
        rows.append([InlineKeyboardButton(title, callback_data=f"SET:STYLE:{code}")])
    rows.append([InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")])
    return InlineKeyboardMarkup(rows)

# ---------- public handlers ----------

async def cmd_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    ui = get_ui_lang(update, context)
    chat_id = update.effective_chat.id

    s = context.user_data or {}
    p = get_user_profile(chat_id) or {}

    language = p.get("target_lang") or s.get("language", "en")
    level = p.get("level") or s.get("level", "B1")
    style = p.get("style") or s.get("style", "casual")
    english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
    append_tr = bool(p.get("append_translation")) if p.get("level") in ("A0", "A1") else False

    text = _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr)

    q = getattr(update, "callback_query", None)
    if q and q.message:
        await q.edit_message_text(text, reply_markup=_menu_keyboard(ui, append_tr))
        try:
            await q.answer()
        except Exception:
            pass
        return

    await context.bot.send_message(chat_id, text, reply_markup=_menu_keyboard(ui, append_tr))

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å SETTINGS:/SET:"""
    q = update.callback_query
    if not q or not q.data:
        return

    data = q.data
    ui = get_ui_lang(update, context)
    chat_id = q.message.chat.id

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "SETTINGS:BACK":
        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = p.get("target_lang") or s.get("language", "en")
        level = p.get("level") or s.get("level", "B1")
        style = p.get("style") or s.get("style", "casual")
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        append_tr = bool(p.get("append_translation")) if p.get("level") in ("A0", "A1") else False
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr),
            reply_markup=_menu_keyboard(ui, append_tr),
        )
        await q.answer()
        return

    if data == "SETTINGS:LANG":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:" if ui == "ru" else "Choose a language:",
            reply_markup=_langs_keyboard(chat_id, ui),
        )
        await q.answer()
        return

    if data == "SETTINGS:LEVEL":
        # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –≥–∞–π–¥ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        guide = None
        try:
            from components.onboarding import get_level_guide  # type: ignore
            guide = get_level_guide(ui)
        except Exception:
            guide = None
        text = ("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "Choose your level") + (f"\n\n{guide}" if guide else "")
        await q.edit_message_text(text, reply_markup=_levels_keyboard(ui))
        await q.answer()
        return

    if data == "SETTINGS:STYLE":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:" if ui == "ru" else "Choose a chat style:",
            reply_markup=_styles_keyboard(ui),
        )
        await q.answer()
        return

    # --- –¢—É–º–±–ª–µ—Ä –∞–≤—Ç–æ–¥—É–±–ª—è ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è A0‚ÄìA1 ---
    if data == "SETTINGS:APPEND_TR":
        p = get_user_profile(chat_id) or {}
        level = p.get("level") or "B1"
        if level in ("A0", "A1"):
            new_val = not bool(p.get("append_translation"))
            save_user_profile(chat_id, append_translation=new_val, append_translation_lang=(p.get("interface_lang") or "en"))
            # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤–∏–¥ –º–µ–Ω—é
            p = get_user_profile(chat_id) or {}
            s = context.user_data or {}
            language = p.get("target_lang") or s.get("language", "en")
            style = p.get("style") or s.get("style", "casual")
            english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
            append_tr = bool(p.get("append_translation"))
            await q.edit_message_text(
                _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr),
                reply_markup=_menu_keyboard(ui, append_tr),
            )
            await q.answer("‚úÖ")
            return
        else:
            # –¥–ª—è B1+ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
            await q.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è" if ui == "ru" else "Unavailable for your level", show_alert=True)
            return

    # --- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: –∞–≤—Ç–æ-–ø—Ä–∏–º–µ–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é ---
    if data.startswith("SET:LANG:"):
        code = data.split(":", 2)[-1]
        context.user_data["language"] = code
        save_user_profile(chat_id, target_lang=code)
        sess = user_sessions.setdefault(chat_id, {})
        sess["target_lang"] = code

        await q.answer("‚úÖ")
        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = p.get("target_lang") or s.get("language", "en")
        level = p.get("level") or s.get("level", "B1")
        style = p.get("style") or s.get("style", "casual")
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        append_tr = bool(p.get("append_translation")) if p.get("level") in ("A0", "A1") else False
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr),
            reply_markup=_menu_keyboard(ui, append_tr),
        )
        return

    if data.startswith("SET:LEVEL:"):
        level = data.split(":", 2)[-1]
        context.user_data["level"] = level
        save_user_profile(chat_id, level=level)
        sess = user_sessions.setdefault(chat_id, {})
        sess["level"] = level

        await q.answer("‚úÖ")
        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = p.get("target_lang") or s.get("language", "en")
        style = p.get("style") or s.get("style", "casual")
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        append_tr = bool(p.get("append_translation")) if level in ("A0", "A1") else False
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr),
            reply_markup=_menu_keyboard(ui, append_tr),
        )
        return

    if data.startswith("SET:STYLE:"):
        style = data.split(":", 2)[-1]
        context.user_data["style"] = style
        save_user_profile(chat_id, style=style)
        sess = user_sessions.setdefault(chat_id, {})
        sess["style"] = style

        await q.answer("‚úÖ")
        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        language = p.get("target_lang") or s.get("language", "en")
        level = p.get("level") or s.get("level", "B1")
        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
        append_tr = bool(p.get("append_translation")) if level in ("A0", "A1") else False
        await q.edit_message_text(
            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style, ui), english_only_note, append_tr),
            reply_markup=_menu_keyboard(ui, append_tr),
        )
        return

    # --- –ö–Ω–æ–ø–∫–∞: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å..." ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –≤—Å—ë, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    if data == "SETTINGS:APPLY":
        p = get_user_profile(chat_id) or {}
        s = context.user_data or {}
        new_lang = p.get("target_lang") or s.get("language", "en")
        new_level = p.get("level") or s.get("level", "B1")
        new_style = p.get("style") or s.get("style", "casual")

        # –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        sess = user_sessions.setdefault(chat_id, {})
        if new_lang:  sess["target_lang"] = new_lang
        if new_level: sess["level"] = new_level
        if new_style: sess["style"] = new_style

        try:
            await q.answer("‚ñ∂Ô∏è")
        except Exception:
            pass

        confirm = (
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.\n–Ø–∑—ã–∫: {_name_for_lang(new_lang)} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {new_level} ‚Ä¢ –°—Ç–∏–ª—å: {_name_for_style(new_style, ui)}"
            if ui == "ru" else
            f"‚úÖ Settings applied.\nLanguage: {_name_for_lang(new_lang)} ‚Ä¢ Level: {new_level} ‚Ä¢ Style: {_name_for_style(new_style, ui)}"
        )
        await context.bot.send_message(chat_id, confirm)
        return

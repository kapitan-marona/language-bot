from __future__ import annotations
from telegram import Update
from telegram.ext import ContextTypes, ApplicationHandlerStop
from telegram.constants import MessageEntityType
from components.access import has_access
from components.usage_db import get_usage, increment_usage
from components.offer_texts import OFFER
from components.promo import is_promo_valid          # ‚úÖ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–æ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
from components.profile_db import get_user_profile   # ‚úÖ –±–µ—Ä—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from components.i18n import get_ui_lang              # NEW
from state.session import user_sessions              # NEW

# >>> ADDED: –∏–º–ø–æ—Ä—Ç –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
from components.profile_db import save_user_profile  # >>> ADDED

FREE_DAILY_LIMIT = 15
REMIND_AFTER = 10

def _offer_text(key: str, lang: str) -> str:        # NEW: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ OFFER
    d = OFFER.get(key) if isinstance(OFFER, dict) else None
    if not isinstance(d, dict):
        return ""
    if lang in d:
        return d[lang]
    # –§–æ–ª–±—ç–∫: —Å–Ω–∞—á–∞–ª–∞ en, –ø–æ—Ç–æ–º ru, –ø–æ—Ç–æ–º –ª—é–±–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è
    return d.get("en") or d.get("ru") or next(iter(d.values()), "")

def _ui_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> str:  # CHANGED: —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Ä–µ–∑–æ–ª–≤–µ—Ä
    try:
        lang = get_ui_lang(update, ctx)  # —É—á–∏—Ç—ã–≤–∞–µ—Ç user_data / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ / –ø—Ä–æ—Ñ–∏–ª—å
        return lang
    except Exception:
        return (ctx.user_data or {}).get("ui_lang", "en")

def _is_countable_message(update: Update) -> bool:
    msg = update.message or update.edited_message
    if not msg:
        return False
    if msg.from_user and msg.from_user.is_bot:
        return False
    if msg.text and msg.text.startswith("/"):
        return False
    if msg.entities:
        for e in msg.entities:
            if e.type in (MessageEntityType.BOT_COMMAND,):
                return False
    return bool(msg.text or msg.voice or msg.audio)

# >>> ADDED: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç (–≤–∞–∂–Ω–æ –¥–ª—è /broadcast –∏ Users(DB))
async def _ensure_profile(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:  # >>> ADDED
    u = update.effective_user                                                         # >>> ADDED
    if not u:                                                                         # >>> ADDED
        return                                                                        # >>> ADDED
    try:                                                                              # >>> ADDED
        if not get_user_profile(u.id):                                                # >>> ADDED
            save_user_profile(                                                        # >>> ADDED
                u.id,                                                                 # >>> ADDED
                name=(u.full_name or u.username or ""),                               # >>> ADDED
                interface_lang=(getattr(u, "language_code", None) or "en"),           # >>> ADDED
            )                                                                         # >>> ADDED
    except Exception:                                                                 # >>> ADDED
        import logging                                                                # >>> ADDED
        logging.getLogger(__name__).debug("ensure_profile failed", exc_info=True)     # >>> ADDED

async def usage_gate(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _is_countable_message(update):
        return

    # >>> ADDED: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–æ –ª—é–±—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    await _ensure_profile(update, ctx)  # >>> ADDED

    # NEW: –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
    try:
        chat_id = update.effective_chat.id
        sess = user_sessions.get(chat_id, {}) or {}
        if sess.get("onboarding_stage") == "awaiting_promo":
            return
    except Exception:
        pass

    user_id = update.effective_user.id

    # 1) –ü—Ä–µ–º–∏—É–º ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if has_access(user_id):
        return

    # 2) –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    profile = get_user_profile(user_id) or {}
    if is_promo_valid(profile):
        return

    # 3) –°—á—ë—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    used = get_usage(user_id)
    lang = _ui_lang(update, ctx)  # CHANGED

    # –î–æ—Å—Ç–∞–µ–º —Ç–µ–∫—Å—Ç—ã OFFER –±–µ–∑–æ–ø–∞—Å–Ω–æ
    limit_text = _offer_text("limit_reached", lang) or (
        "–õ–∏–º–∏—Ç –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç." if lang == "ru" else "You‚Äôve hit the daily trial limit."
    )  # NEW
    reminder_text = _offer_text("reminder_after_10", lang) or (
        "–û—Å—Ç–∞–ª–æ—Å—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ." if lang == "ru" else "You‚Äôve got 5 messages left on the trial."
    )  # NEW

    if used >= FREE_DAILY_LIMIT:
        hint = ("\n\nüí° –í–≤–µ–¥–∏—Ç–µ /promo –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                if lang == "ru"
                else "\n\nüí° Enter /promo to activate a promo code and continue.")
        await (update.message or update.edited_message).reply_text(limit_text + hint)
        raise ApplicationHandlerStop

    used = increment_usage(user_id)

    if used == REMIND_AFTER:
        # NEW: –¥–æ–±–∞–≤–∏–º –º—è–≥–∫–∏–π —Ö–∏–Ω—Ç –ø—Ä–æ /promo –∏ —Ç—É—Ç —Ç–æ–∂–µ
        hint = ("\n\nüí° –ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? –í–≤–µ–¥–∏—Ç–µ /promo <–∫–æ–¥>."
                if lang == "ru"
                else "\n\nüí° Have a promo code? Use /promo <code>.")
        await (update.message or update.edited_message).reply_text(reminder_text + hint)

    if used > FREE_DAILY_LIMIT:
        hint = ("\n\nüí° –í–≤–µ–¥–∏—Ç–µ /promo –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                if lang == "ru"
                else "\n\nüí° Enter /promo to activate a promo code and continue.")
        await (update.message or update.edited_message).reply_text(limit_text + hint)
        raise ApplicationHandlerStop

from __future__ import annotations
import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes, ApplicationHandlerStop
from telegram.constants import MessageEntityType

from components.access import has_access
from components.usage_db import get_usage, increment_usage
from components.offer_texts import OFFER
from components.promo import is_promo_valid
from components.profile_db import get_user_profile
from components.i18n import get_ui_lang
from state.session import user_sessions

logger = logging.getLogger("english-bot")
logger.info("[gate] module loaded")

FREE_DAILY_LIMIT = 15
REMIND_AFTER = 10

def _offer_text(key: str, lang: str) -> str:
    d = OFFER.get(key) if isinstance(OFFER, dict) else None
    if not isinstance(d, dict):
        return ""
    if lang in d:
        return d[lang]
    return d.get("en") or d.get("ru") or next(iter(d.values()), "")

def _ui_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        return get_ui_lang(update, ctx)
    except Exception:
        return (ctx.user_data or {}).get("ui_lang", "en")

def _is_countable_message(update: Update) -> bool:
    msg = update.message or update.edited_message
    if not msg:
        return False
    if msg.from_user and msg.from_user.is_bot:
        return False
    if msg.text and msg.text.startswith("/"):
        return False
    if msg.entities:
        for e in msg.entities:
            if e.type in (MessageEntityType.BOT_COMMAND,):
                return False
    return bool(msg.text or msg.voice or msg.audio)

async def usage_gate(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–∞
    try:
        uid = getattr(update.effective_user, "id", None)
        cid = getattr(update.effective_chat, "id", None)
        snippet = (getattr(update.message, "text", "") or "")[:60]
        logger.info("[gate] enter user=%s chat=%s text=%r", uid, cid, snippet)
    except Exception:
        pass

    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ ¬´–¥–∏–∞–ª–æ–≥–æ–≤—ã–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ –æ—Ç –±–æ—Ç–∞ –∏ —Ç.–ø.)
    if not _is_countable_message(update):
        logger.info("[gate] not countable -> pass through")
        return

    # –î–æ—Å—Ç–∞—ë–º chat_id/session –æ–¥–∏–Ω —Ä–∞–∑
    chat_id = getattr(update.effective_chat, "id", None)
    sess = user_sessions.get(chat_id, {}) or {}

    # –í–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å—á–∏—Ç–∞–µ–º/–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
    if sess.get("onboarding_stage") == "awaiting_promo":
        logger.info("[gate] awaiting_promo -> pass through")
        return

    user_id = getattr(update.effective_user, "id", None)

    # –ü—Ä–µ–º–∏—É–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    try:
        premium = await asyncio.to_thread(has_access, user_id)
    except Exception:
        logger.exception("[gate] has_access failed; treating as no access")
        premium = False
    if premium:
        logger.info("[gate] has_access=True -> pass through")
        return

    # –ü—Ä–æ—Ñ–∏–ª—å –±–µ—Ä—ë–º –ø–æ chat_id (–≤ —Ç–≤–æ–µ–π –ë–î –∫–ª—é—á ‚Äî chat_id)
    try:
        profile = await asyncio.to_thread(get_user_profile, chat_id)
        profile = profile or {}
    except Exception:
        logger.exception("[gate] get_user_profile failed; assuming empty profile")
        profile = {}

    # ¬´–î–æ–ª—å—ë–º¬ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ–º–æ-–ø–æ–ª—è –∏–∑ session (–≤–∞–∂–Ω–æ –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤ –∏ —Ç.–ø.)
    for k in ("promo_code_used", "promo_type", "promo_activated_at", "promo_days", "promo_minutes", "promo_used_codes"):
        if k not in profile and k in sess:
            profile[k] = sess[k]

    # –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if is_promo_valid(profile):
        logger.info("[gate] promo valid -> pass through")
        return

    # –°—á—ë—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—á–∏—Ç–∞–µ–º –ø–æ user_id (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    try:
        used = await asyncio.to_thread(get_usage, user_id)
    except Exception:
        logger.exception("[gate] get_usage failed; fallback used=0")
        used = 0

    ui = _ui_lang(update, ctx)

    limit_text = _offer_text("limit_reached", ui) or (
        "–õ–∏–º–∏—Ç –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç." if ui == "ru" else "You‚Äôve hit the daily trial limit."
    )
    reminder_text = _offer_text("reminder_after_10", ui) or (
        "–û—Å—Ç–∞–ª–æ—Å—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ." if ui == "ru" else "You‚Äôve got 5 messages left on the trial."
    )

    logger.info("[gate] usage before increment = %s (limit=%s)", used, FREE_DAILY_LIMIT)

    # –£–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –ø—Ä–æ–º–æ/–ø–æ–∫—É–ø–∫–∏
    if used >= FREE_DAILY_LIMIT:
        hint = ("\n\nüí° –í–≤–µ–¥–∏—Ç–µ /promo –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                if ui == "ru"
                else "\n\nüí° Enter /promo to activate a promo code and continue.")
        await (update.message or update.edited_message).reply_text(limit_text + hint)
        logger.info("[gate] limit reached -> stop")
        raise ApplicationHandlerStop

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç
    try:
        used = await asyncio.to_thread(increment_usage, user_id)
    except Exception:
        logger.exception("[gate] increment_usage failed; treating as exceeded")
        used = FREE_DAILY_LIMIT + 1

    logger.info("[gate] usage after increment = %s", used)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 10-–º
    if used == REMIND_AFTER:
        hint = ("\n\nüí° –ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? –í–≤–µ–¥–∏—Ç–µ /promo <–∫–æ–¥>."
                if ui == "ru"
                else "\n\nüí° Have a promo code? Use /promo <code>.")
        await (update.message or update.edited_message).reply_text(reminder_text + hint)

    # –ü–µ—Ä–µ—à–∞–≥–Ω—É–ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
    if used > FREE_DAILY_LIMIT:
        hint = ("\n\nüí° –í–≤–µ–¥–∏—Ç–µ /promo –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                if ui == "ru"
                else "\n\nüí° Enter /promo to activate a promo code and continue.")
        await (update.message or update.edited_message).reply_text(limit_text + hint)
        logger.info("[gate] limit exceeded after increment -> stop")
        raise ApplicationHandlerStop

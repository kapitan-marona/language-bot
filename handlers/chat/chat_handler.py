import os
import tempfile
import openai
from telegram import Update
from telegram.ext import ContextTypes

from components.gpt_client import ask_gpt
from handlers.chat.prompt_templates import get_system_prompt  # ‚ú® –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–º–ø–æ—Ä—Ç
from components.voice import synthesize_voice
from components.mode import MODE_SWITCH_MESSAGES
from state.session import user_sessions
from components.levels import get_rules_by_level

MAX_HISTORY_LENGTH = 40

LANGUAGE_CODES = {
    "en": "en-US",
    "fr": "fr-FR",
    "de": "de-DE",
    "es": "es-ES",
    "ru": "ru-RU",
    "sv": "sv-SE",
    "fi": "fi-FI"
}

def get_greeting_name(lang: str) -> str:
    return "Matt" if lang == "en" else "–ú—ç—Ç—Ç"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}

    session = user_sessions[chat_id]
    session.setdefault("interface_lang", "en")
    session.setdefault("target_lang", "en")
    session.setdefault("level", "A2")
    session.setdefault("mode", "text")

    message_text = update.message.text or ""

    # --- üîΩüîΩüîΩ  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞  üîΩüîΩüîΩ ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" –∏ —Ç.–¥.
    import re

    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    creator_triggers_ru = [
        "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª",
        "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
        "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–∫—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª",
        "–∫—Ç–æ —Ç–µ–±—è –ø—Ä–∏–¥—É–º–∞–ª",
        "–∫–∞–∫ —Ç—ã –ø–æ—è–≤–∏–ª—Å—è",
        "–æ—Ç–∫—É–¥–∞ —Ç—ã –≤–∑—è–ª—Å—è"
    ]
    creator_triggers_en = [
        "who created you",
        "who is your creator",
        "who is your developer",
        "who developed you",
        "who invented you",
        "how did you appear",
        "where did you come from"
    ]

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
    user_text_norm = re.sub(r'[^\w\s]', '', message_text.lower())

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    lang = session.get("interface_lang", "en")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    found_trigger = False
    if lang == "ru":
        for trig in creator_triggers_ru:
            if trig in user_text_norm:
                found_trigger = True
                break
    else:
        for trig in creator_triggers_en:
            if trig in user_text_norm:
                found_trigger = True
                break

    # –ï—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if found_trigger:
        if lang == "ru":
            reply_text = "üêæ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî @marrona! –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–∞–π—Å—è –ø—Ä—è–º–æ –∫ –Ω–µ–π. üå∑"
        else:
            reply_text = "üêæ My creator is @marrona! For feedback or collaboration offers, feel free to contact her directly. üå∑"
        await update.message.reply_text(reply_text)
        return
    # --- üîºüîºüîº  –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏  üîºüîºüîº ---

    # –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    history = session.setdefault("history", [])

    interface_lang = session["interface_lang"]
    target_lang = session["target_lang"]
    level = session["level"]
    mode = session["mode"]

    style = session.get("style", "casual")
    system_prompt = get_system_prompt(style, level, interface_lang, mode)

    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π prompt + –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    prompt = [{"role": "system", "content": system_prompt}]
    for msg in history:
        prompt.append(msg)
    prompt.append({"role": "user", "content": message_text})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT
    assistant_reply = await ask_gpt(prompt, "gpt-4o")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "user", "content": message_text})
    history.append({"role": "assistant", "content": assistant_reply})

    if len(history) > MAX_HISTORY_LENGTH:
        history.pop(0)

    # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == "voice":
        voice_path = synthesize_voice(assistant_reply, LANGUAGE_CODES.get(target_lang, "en-US"), level)
        print("üîä [TTS] –§–∞–π–ª –æ–∑–≤—É—á–∫–∏:", voice_path)
        print("üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", os.path.exists(voice_path))
        try:
            with open(voice_path, "rb") as vf:
                await context.bot.send_voice(chat_id=chat_id, voice=vf)

            # üó£Ô∏è –î—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–º + –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if level == "A0":
                await context.bot.send_message(chat_id=chat_id, text=f"{assistant_reply}\n\n üíå")
            elif level in ["A1", "A2"]:
                await context.bot.send_message(chat_id=chat_id, text=assistant_reply)
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–∞] {e}")
    else:
        await update.message.reply_text(assistant_reply)

import os
import time
import random
import re
import tempfile
import logging
from html import unescape  # NEW: –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ plain-–¥—É–±–ª—è
from telegram import Update
from telegram.ext import ContextTypes

from config.config import ADMINS, OPENAI_API_KEY
from openai import OpenAI  # –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è ASR

from components.gpt_client import ask_gpt
from components.voice import synthesize_voice
from components.mode import MODE_SWITCH_MESSAGES, get_mode_keyboard
from state.session import user_sessions
from handlers.chat.prompt_templates import get_system_prompt
from components.triggers import CREATOR_TRIGGERS, MODE_TRIGGERS
from components.triggers import is_strict_mode_trigger, is_strict_say_once_trigger
from components.code_switch import rewrite_mixed_input  # ‚Üê NEW

logger = logging.getLogger(__name__)

oai_asr = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

MAX_HISTORY_LENGTH = 40
RATE_LIMIT_SECONDS = 1.5

LANGUAGE_CODES = {
    "en": "en-US",
    "fr": "fr-FR",
    "de": "de-DE",
    "es": "es-ES",
    "ru": "ru-RU",
    "sv": "sv-SE",
    "fi": "fi-FI",
}

# ====================== –°–¢–ò–ö–ï–†–´ + –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ ======================

# --- –°—Ç–∏–∫–µ—Ä—ã (—Ä–µ–∞–ª—å–Ω—ã–µ file_id) ---
STICKERS = {
    "hello": ["CAACAgIAAxkBAAItV2i269d_71pHUu5Rm9f62vsCW0TrAAJJkAAC96S4SXJs5Yp4uIyENgQ"],
    "fire":  ["CAACAgIAAxkBAAItWWi26-vSBaRPbX6a2imIoWq4Jo0pAALhfwAC6gm5SSTLD1va-EfRNgQ"],
    "sorry": ["CAACAgIAAxkBAAItWGi26-jb1_zQAAE1IyLH1XfqWH5aZQAC3oAAAt7vuUlXHMvWZt7gQDYE"],
}

async def maybe_send_sticker(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, key: str, chance: float = 0.35):
    """–ò–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–ª—é—á—É. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    try:
        if key not in STICKERS:
            return
        if random.random() < chance:
            await ctx.bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERS[key]))
    except Exception:
        # —Å—Ç–∏–∫–µ—Ä ‚Äî ¬´–ø—Ä–∏—è—Ç–Ω–∞—è –¥–æ–±–∞–≤–∫–∞¬ª, –ø–∞–¥–∞—Ç—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞
        pass

# --- –õ—ë–≥–∫–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ–Ω—Ç–æ–≤ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π) ---
_GREET_EMOJI = {"üëã", "ü§ù"}
_COMPLIMENT_EMOJI = {"üî•", "üíØ", "üëè", "üåü", "üëç", "‚ù§Ô∏è", "üíñ", "‚ú®"}

# –°—Ç–µ–º—ã/—Å–ª–æ–≤–∞ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —è–∑—ã–∫–∞–º (–∫–æ—Ä–æ—Ç–∫–æ –∏ –æ–±—â–µ—É–ø–æ—Ç—Ä–µ–±–∏–º–æ)
_GREET_WORDS = {
    # en
    "hi", "hello", "hey",
    # ru
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥–æ—Ä–æ–≤–æ", "—Ö–∞–π", "—Ö–µ–ª–ª–æ",
    # fr
    "bonjour", "salut",
    # es
    "hola", "buenas",
    # de
    "hallo", "servus", "moin",
    # sv
    "hej", "hejsan", "tjena",
    # fi
    "hei", "moi", "terve",
}

_COMPLIMENT_STEMS = {
    # en
    "great", "awesome", "amazing", "love it", "nice", "cool",
    # ru
    "–∫–ª–∞—Å—Å", "—Å—É–ø–µ—Ä", "—Ç–æ–ø", "–∫—Ä—É—Ç–æ", "–º–æ–ª–æ–¥–µ—Ü", "–æ–≥–æ–Ω—å",
    # fr
    "super", "g√©nial", "genial", "top", "formid",
    # es
    "genial", "incre√≠ble", "increible", "super", "top", "bravo",
    # de
    "super", "toll", "klasse", "mega", "geil",
    # sv
    "super", "grym", "toppen", "snyggt", "bra jobbat",
    # fi
    "mahtava", "huikea", "upea", "super", "hieno",
}

_SORRY_STEMS = {
    # en
    "sorry", "apolog", "my bad", "wrong", "mistake", "incorrect",
    "you‚Äôre wrong", "you are wrong",
    # ru
    "–ø—Ä–æ—Å—Ç–∏", "–∏–∑–≤–∏–Ω", "–æ—à–∏–±", "–Ω–µ —Ç–∞–∫", "–Ω–µ–ø—Ä–∞–≤–∏–ª", "—Ç—ã –æ—à–∏–±",
    # fr
    "d√©sol√©", "desole", "pardon", "erreur", "faux",
    # es
    "perd√≥n", "perdon", "lo siento", "error", "equivoc",
    # de
    "sorry", "entschuldig", "fehler", "falsch",
    # sv
    "f√∂rl√•t", "forlat", "fel",
    # fi
    "anteeksi", "virhe", "v√§√§rin", "vaarin",
}

def _norm_msg_keep_emoji(s: str) -> str:
    s = (s or "").lower()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω U+1F300‚ÄìU+1FAFF), –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    s = re.sub(r"[^\w\s\u0400-\u04FF\u00C0-\u024F\u1F300-\u1FAFF]", " ", s, flags=re.UNICODE)
    s = re.sub(r"\s+", " ", s).strip()
    return s

def is_greeting(raw: str) -> bool:
    if not raw:
        return False
    if any(e in raw for e in _GREET_EMOJI):
        return True
    msg = _norm_msg_keep_emoji(raw)
    words = set(msg.split())
    return any(w in words for w in _GREET_WORDS)

def is_compliment(raw: str) -> bool:
    if not raw:
        return False
    if any(e in raw for e in _COMPLIMENT_EMOJI):
        return True
    msg = _norm_msg_keep_emoji(raw)
    return any(kw in msg for kw in _COMPLIMENT_STEMS)

def is_correction(raw: str) -> bool:
    if not raw:
        return False
    msg = _norm_msg_keep_emoji(raw)
    return any(kw in msg for kw in _SORRY_STEMS)

# ====================== /–°–¢–ò–ö–ï–†–´ ======================


def get_greeting_name(lang: str) -> str:
    return "Matt" if lang == "en" else "–ú—ç—Ç—Ç"


def _sanitize_user_text(text: str, max_len: int = 2000) -> str:
    text = (text or "").strip()
    if len(text) > max_len:
        text = text[:max_len]
    return text


def _strip_html(s: str) -> str:
    """–£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ plain-—Ç–µ–∫—Å—Ç–∞."""
    return re.sub(r"<[^>\n]+>", "", unescape(s or ""))


async def _send_voice_or_audio(context: ContextTypes.DEFAULT_TYPE, chat_id: int, file_path: str):
    """
    –ï—Å–ª–∏ .ogg ‚Äî —à–ª—ë–º –∫–∞–∫ voice, –∏–Ω–∞—á–µ (.mp3) ‚Äî –∫–∞–∫ audio.
    """
    if file_path.lower().endswith(".ogg"):
        with open(file_path, "rb") as vf:
            await context.bot.send_voice(chat_id=chat_id, voice=vf)
    else:
        with open(file_path, "rb") as af:
            await context.bot.send_audio(chat_id=chat_id, audio=af)


# --- –ì–ª–∞–≤–Ω—ã–π message handler ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})

    # === –ï—Å–ª–∏ –∂–¥—ë–º –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º ===
    try:
        stage = session.get("onboarding_stage")
    except Exception:
        stage = None
    if stage == "awaiting_promo":
        from components.onboarding import promo_code_message
        return await promo_code_message(update, context)

    # --- RATE LIMITING ---
    now = time.time()
    last_time = session.get("last_message_time", 0)
    if now - last_time < RATE_LIMIT_SECONDS:
        await context.bot.send_message(chat_id=chat_id, text="‚è≥ –ü–æ–≥–æ–¥–∏, –¥—É–º–∞—é üôÇ")
        return
    session["last_message_time"] = now

    try:
        # --- session defaults ---
        session.setdefault("interface_lang", "en")
        session.setdefault("target_lang", "en")
        session.setdefault("level", "A2")
        session.setdefault("mode", "text")
        session.setdefault("style", "casual")

        # --- –î–æ—Å—Ç–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏ ---
        interface_lang = session["interface_lang"]
        target_lang = session["target_lang"]
        level = session["level"]
        mode = session["mode"]
        style = session["style"]

        # === –í—Ö–æ–¥: –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç ===
        if update.message.voice:
            if not oai_asr:
                await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏èASR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                return

            voice_file = await context.bot.get_file(update.message.voice.file_id)
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tf:
                await voice_file.download_to_drive(tf.name)
                audio_path = tf.name
            try:
                with open(audio_path, "rb") as f:
                    tr = oai_asr.audio.transcriptions.create(
                        model="whisper-1",
                        file=f,
                    )
                user_input = (getattr(tr, "text", "") or "").strip()
                logger.info("Whisper recognized text: %r", user_input)
            except Exception:
                await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏è–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                logger.exception("[Whisper Error]")
                user_input = ""
            finally:
                try:
                    os.remove(audio_path)
                except Exception as e_rm:
                    logger.warning("Failed to remove temp audio: %s", e_rm)
        else:
            user_input = update.message.text or ""

        user_input = _sanitize_user_text(user_input, max_len=2000)
        if not user_input:
            await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏è–ü–æ—Ö–æ–∂–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë üôÇ")
            return

        # === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ (—Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã) ===
        def _norm(s: str) -> str:
            s = re.sub(r"[^\w\s]", " ", (s or "").lower())
            s = re.sub(r"\s+", " ", s).strip()
            return s

        msg_norm = _norm(user_input)

        VOICE_STRICT = {
            "–≥–æ–ª–æ—Å", "–≤ –≥–æ–ª–æ—Å", "–≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º",
            "voice", "voice mode"
        }
        TEXT_STRICT = {
            "—Ç–µ–∫—Å—Ç", "–≤ —Ç–µ–∫—Å—Ç", "–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º",
            "text", "text mode"
        }

        # --- –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: –ø—Ä–∏ –Ω–∏—Ö –ù–ò–ö–ê–ö–ò–• —Å—Ç–∏–∫–µ—Ä–æ–≤ ---
        if msg_norm in VOICE_STRICT:
            if session["mode"] != "voice":
                session["mode"] = "voice"
                msg = MODE_SWITCH_MESSAGES["voice"].get(interface_lang, MODE_SWITCH_MESSAGES["voice"]["en"])
                await update.message.reply_text(msg, reply_markup=get_mode_keyboard("voice", interface_lang))
            return

        if msg_norm in TEXT_STRICT:
            if session["mode"] != "text":
                session["mode"] = "text"
                msg = MODE_SWITCH_MESSAGES["text"].get(interface_lang, MODE_SWITCH_MESSAGES["text"]["en"])
                await update.message.reply_text(msg, reply_markup=get_mode_keyboard("text", interface_lang))
            return

        # --- –°—Ç–∏–∫–µ—Ä—ã –ø–æ –∏–Ω—Ç–µ–Ω—Ç–∞–º (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ). –ó–¥–µ—Å—å —É–∂–µ –º–æ–∂–Ω–æ.
        msg_raw = user_input or ""
        if is_greeting(msg_raw):
            await maybe_send_sticker(context, chat_id, "hello", chance=0.4)
        if is_compliment(msg_raw):
            await maybe_send_sticker(context, chat_id, "fire", chance=0.35)
        if is_correction(msg_raw):
            # –í–ê–ñ–ù–û: —Å—Ç–∏–∫–µ—Ä ‚Äì —Ç–æ–ª—å–∫–æ ¬´–∏–Ω–æ–≥–¥–∞¬ª. –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
            await maybe_send_sticker(context, chat_id, "sorry", chance=0.35)

        # --- –°–æ–∑–¥–∞—Ç–µ–ª—å ---
        found_trigger = False
        norm_for_creator = re.sub(r"[^\w\s]", "", user_input.lower())
        for trig in CREATOR_TRIGGERS.get(interface_lang, CREATOR_TRIGGERS["en"]):
            if trig in norm_for_creator:
                found_trigger = True
                break
        if found_trigger:
            if interface_lang == "ru":
                reply_text = "üêæ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî @marrona! –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–∞–π—Å—è –ø—Ä—è–º–æ –∫ –Ω–µ–π. üå∑"
            else:
                reply_text = "üêæ My creator is @marrona! For feedback or collaboration offers, feel free to contact her directly. üå∑"
            await update.message.reply_text(reply_text)
            return

        # --- –ò—Å—Ç–æ—Ä–∏—è + —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
        history = session.setdefault("history", [])
        system_prompt = get_system_prompt(style, level, interface_lang, target_lang, mode)
        prompt = [{"role": "system", "content": system_prompt}]
        prompt.extend(history)

        # --- –õ—ë–≥–∫–∞—è –ø–æ—á–∏–Ω–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã ---
        clean_user_input, preface_html = await rewrite_mixed_input(
            user_input, interface_lang, target_lang
        )
        prompt.append({"role": "user", "content": clean_user_input})

        assistant_reply = await ask_gpt(prompt, "gpt-4o")

        # --- –ò—Å—Ç–æ—Ä–∏—è ---
        history.append({"role": "user", "content": clean_user_input})
        history.append({"role": "assistant", "content": assistant_reply})
        if len(history) > MAX_HISTORY_LENGTH:
            history.pop(0)

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
        final_reply_text = f"{preface_html}\n\n{assistant_reply}" if preface_html else assistant_reply

        if mode == "voice":
            voice_path = synthesize_voice(assistant_reply, LANGUAGE_CODES.get(target_lang, "en-US"), level)
            try:
                if voice_path:
                    await _send_voice_or_audio(context, chat_id, voice_path)
                else:
                    raise RuntimeError("No TTS data")
            except Exception:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n" + _strip_html(final_reply_text),
                )
            if level in ["A0", "A1", "A2"]:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=_strip_html(final_reply_text))
                except Exception:
                    pass
            session["last_assistant_text"] = assistant_reply
        else:
            await update.message.reply_text(final_reply_text, parse_mode="HTML")
            session["last_assistant_text"] = assistant_reply

    except Exception:
        logger.exception("[–û–®–ò–ë–ö–ê –≤ handle_message]")
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")

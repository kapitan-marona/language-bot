import os
import time
import random
import re
import tempfile
import logging
from html import unescape
from telegram import Update
from telegram.ext import ContextTypes

from config.config import OPENAI_API_KEY
from openai import OpenAI  # ASR

from components.gpt_client import ask_gpt
from components.voice import synthesize_voice
from components.mode import MODE_SWITCH_MESSAGES, get_mode_keyboard
from state.session import user_sessions
from handlers.chat.prompt_templates import get_system_prompt
from components.triggers import CREATOR_TRIGGERS, is_strict_say_once_trigger
from components.code_switch import rewrite_mixed_input
from components.profile_db import save_user_profile

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: —Å—Ç—Ä–æ–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
from components.translator import do_translate

# –†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: –¥–µ—Ñ–æ–ª—Ç—ã/–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –º—è–≥–∫–∏–µ –∑–∞–≥–ª—É—à–∫–∏)
try:
    from handlers.translator_mode import ensure_tr_defaults, enter_translator, exit_translator
except Exception:  # —Ñ–∞–π–ª –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–µ–ø–ª–æ–µ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    def ensure_tr_defaults(_): ...
    async def enter_translator(*args, **kwargs): ...
    async def exit_translator(*args, **kwargs): ...

logger = logging.getLogger(__name__)
oai_asr = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

MAX_HISTORY_LENGTH = 40
RATE_LIMIT_SECONDS = 1.5

LANGUAGE_CODES = {
    "en": "en-US",
    "fr": "fr-FR",
    "de": "de-DE",
    "es": "es-ES",
    "ru": "ru-RU",
    "sv": "sv-SE",
    "fi": "fi-FI",
}

# ====================== –°–¢–ò–ö–ï–†–´ + –¢–†–ò–ì–ì–ï–†–´ ======================
# –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –¥–≤–∞ —Å—Ç–∏–∫–µ—Ä–∞: hello (–ø—Ä–∏–≤–µ—Ç) –∏ fire (–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã). sorry ‚Äî —É–¥–∞–ª—ë–Ω.
STICKERS = {
    "hello": ["CAACAgIAAxkBAAItV2i269d_71pHUu5Rm9f62vsCW0TrAAJJkAAC96S4SXJs5Yp4uIyENgQ"],
    "fire":  ["CAACAgIAAxkBAAItWWi26-vSBaRPbX6a2imIoWq4Jo0pAALhfwAC6gm5SSTLD1va-EfRNgQ"],
}

# ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ onboarding).
# –î–µ–ª–∞–µ—Ç –ù–ò–ß–ï–ì–û, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä—ã —Å–∞–º –ø–æ —Å–µ–±–µ.
async def maybe_send_sticker(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, key: str, chance: float = 0.35):
    return  # no-op (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

_GREET_EMOJI = {"üëã", "ü§ù"}
_COMPLIMENT_EMOJI = {"üî•", "üíØ", "üëè", "üåü", "üëç", "‚ù§Ô∏è", "üíñ", "‚ú®"}

_GREET_WORDS = {
    "hi", "hello", "hey",
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥–æ—Ä–æ–≤–æ", "—Ö–∞–π", "—Ö–µ–ª–ª–æ",
    "bonjour", "salut",
    "hola", "buenas",
    "hallo", "servus", "moin",
    "hej", "hejsan", "tjena",
    "hei", "moi", "terve",
}

_COMPLIMENT_STEMS = {
    "great", "awesome", "amazing", "love it", "nice", "cool",
    "–∫–ª–∞—Å—Å", "—Å—É–ø–µ—Ä", "—Ç–æ–ø", "–∫—Ä—É—Ç–æ", "–º–æ–ª–æ–¥–µ—Ü", "–æ–≥–æ–Ω—å",
    "super", "g√©nial", "genial", "top", "formid",
    "genial", "incre√≠ble", "increible", "super", "top", "bravo",
    "super", "toll", "klasse", "mega", "geil",
    "super", "grym", "toppen", "snyggt", "bra jobbat",
    "mahtava", "huikea", "upea", "super", "hieno",
}

# ¬´–ò–∑–≤–∏–Ω–∏/–æ—à–∏–±–∫–∞¬ª –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤:
_SORRY_STEMS = set()

def _norm_msg_keep_emoji(s: str) -> str:
    s = (s or "").lower()
    s = re.sub(r"[^\w\s\u0400-\u04FF\u00C0-\u024F\u1F300-\u1FAFF]", " ", s, flags=re.UNICODE)
    s = re.sub(r"\s+", " ", s).strip()
    return s

def is_greeting(raw: str) -> bool:
    if not raw:
        return False
    if any(e in raw for e in _GREET_EMOJI):
        return True
    msg = _norm_msg_keep_emoji(raw)
    words = set(msg.split())
    return any(w in words for w in _GREET_WORDS)

def is_compliment(raw: str) -> bool:
    if not raw:
        return False
    if any(e in raw for e in _COMPLIMENT_EMOJI):
        return True
    msg = _norm_msg_keep_emoji(raw)
    return any(kw in msg for kw in _COMPLIMENT_STEMS)

def _sanitize_user_text(text: str, max_len: int = 2000) -> str:
    text = (text or "").strip()
    if len(text) > max_len:
        text = text[:max_len]
    return text

def _strip_html(s: str) -> str:
    return re.sub(r"<[^>\n]+>", "", unescape(s or ""))

async def _send_voice_or_audio(context: ContextTypes.DEFAULT_TYPE, chat_id: int, file_path: str):
    if file_path.lower().endswith(".ogg"):
        with open(file_path, "rb") as vf:
            await context.bot.send_voice(chat_id=chat_id, voice=vf)
    else:
        with open(file_path, "rb") as af:
            await context.bot.send_audio(chat_id=chat_id, audio=af)

# –®–ª—ë–º —Å—Ç–∏–∫–µ—Ä –¢–û–õ–¨–ö–û –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –° –∞–Ω—Ç–∏-—Ñ–ª—É–¥–æ–º per chat.
async def maybe_send_sticker_user(ctx: ContextTypes.DEFAULT_TYPE, update: Update, key: str, chance: float = 0.4):
    try:
        if key not in STICKERS or not STICKERS[key]:
            return
        # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –Ω–∞ –±–æ—Ç–∞
        if not update.effective_user or (hasattr(ctx, "bot") and update.effective_user.id == ctx.bot.id):
            return

        chat_id = update.effective_chat.id
        sess = user_sessions.setdefault(chat_id, {})
        now = time.time()
        # –∞–Ω—Ç–∏—Ñ–ª—É–¥: –Ω–µ —á–∞—â–µ 8 —Å–µ–∫ –Ω–∞ —á–∞—Ç
        if now < sess.get("next_sticker_at", 0):
            return

        if random.random() < chance:
            await ctx.bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERS[key]))
            sess["next_sticker_at"] = now + 8.0
    except Exception:
        logger.debug("send_sticker failed", exc_info=True)

# ====================== –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† ======================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})

    # last seen
    try:
        import datetime as _dt
        save_user_profile(chat_id, last_seen_at=_dt.datetime.utcnow().isoformat())
    except Exception:
        logger.exception("failed to update last_seen_at", exc_info=True)

    # onboarding promo
    try:
        stage = session.get("onboarding_stage")
    except Exception:
        stage = None
    if stage == "awaiting_promo":
        from components.onboarding import promo_code_message
        return await promo_code_message(update, context)

    # rate limiting
    now = time.time()
    if now - session.get("last_message_time", 0) < RATE_LIMIT_SECONDS:
        await context.bot.send_message(chat_id=chat_id, text="‚è≥ –ü–æ–≥–æ–¥–∏, –¥—É–º–∞—é üôÇ")
        return
    session["last_message_time"] = now

    try:
        # defaults
        session.setdefault("interface_lang", "en")
        session.setdefault("target_lang", "en")
        session.setdefault("level", "A2")
        session.setdefault("mode", "text")
        session.setdefault("style", "casual")
        session.setdefault("task_mode", "chat")
        ensure_tr_defaults(session)

        interface_lang = session["interface_lang"]
        target_lang = session["target_lang"]
        level = session["level"]
        mode = session["mode"]
        style = session["style"]
        translator_cfg = session.get("translator") or {}

        # –≤—Ö–æ–¥: –≥–æ–ª–æ—Å/—Ç–µ–∫—Å—Ç
        if update.message.voice:
            if not oai_asr:
                await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏èASR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                return
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tf:
                await voice_file.download_to_drive(tf.name)
                audio_path = tf.name
            try:
                with open(audio_path, "rb") as f:
                    tr = oai_asr.audio.transcriptions.create(
                        model="whisper-1",
                        file=f,
                    )
                user_input = (getattr(tr, "text", "") or "").strip()
                logger.info("Whisper recognized text: %r", user_input)
            except Exception:
                await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏è–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                logger.exception("[Whisper Error]", exc_info=True)
                user_input = ""
            finally:
                try:
                    os.remove(audio_path)
                except Exception:
                    logger.exception("Failed to remove temp audio", exc_info=True)
        else:
            user_input = update.message.text or ""

        user_input = _sanitize_user_text(user_input, max_len=2000)
        if not user_input:
            await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏è–ü–æ—Ö–æ–∂–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë üôÇ")
            return

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä
        def _norm(s: str) -> str:
            s = re.sub(r"[^\w\s]", " ", (s or "").lower())
            s = re.sub(r"\s+", " ", s).strip()
            return s
        msg_norm = _norm(user_input)

        # ===== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è text/voice =====
        VOICE_STRICT = {"–≥–æ–ª–æ—Å","–≤ –≥–æ–ª–æ—Å","–≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º","voice","voice mode"}
        TEXT_STRICT  = {"—Ç–µ–∫—Å—Ç","–≤ —Ç–µ–∫—Å—Ç","–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º","text","text mode"}

        if msg_norm in VOICE_STRICT:
            if session["mode"] != "voice":
                session["mode"] = "voice"
                msg = MODE_SWITCH_MESSAGES["voice"].get(interface_lang, MODE_SWITCH_MESSAGES["voice"]["en"])
                await update.message.reply_text(msg, reply_markup=get_mode_keyboard("voice", interface_lang))
            return
        if msg_norm in TEXT_STRICT:
            if session["mode"] != "text":
                session["mode"] = "text"
                msg = MODE_SWITCH_MESSAGES["text"].get(interface_lang, MODE_SWITCH_MESSAGES["text"]["en"])
                await update.message.reply_text(msg, reply_markup=get_mode_keyboard("text", interface_lang))
            return

        # ===== –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ =====
        if msg_norm in {"/translator","translator","–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫","—Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞","–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫","need a translator"}:
            return await enter_translator(update, context, session)
        if msg_norm in {"/translator_off","/translator off","translator off","–≤—ã–π—Ç–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞","–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—ã–∫–ª"}:
            return await exit_translator(update, context, session)

        # ===== –û–∑–≤—É—á–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–∏–π —Ç—Ä–∏–≥–≥–µ—Ä, –±–µ–∑ smart_say_once_parse) =====
        if is_strict_say_once_trigger(user_input, interface_lang):
            # —è–∑—ã–∫ TTS: –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ ‚Äî –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –∏–Ω–∞—á–µ ‚Äî target_lang
            if session.get("task_mode") == "translator":
                direction = (translator_cfg or {}).get("direction", "ui‚Üítarget")
                tts_lang = interface_lang if direction == "target‚Üíui" else target_lang
            else:
                tts_lang = target_lang

            last_text = session.get("last_assistant_text")
            if not last_text:
                msg = "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞—Ç—å üòÖ" if interface_lang == "ru" else "Nothing to voice yet üòÖ"
                await update.message.reply_text(msg)
                return

            try:
                voice_path = synthesize_voice(last_text, LANGUAGE_CODES.get(tts_lang, "en-US"), level)
                if voice_path:
                    await _send_voice_or_audio(context, chat_id, voice_path)
                else:
                    raise RuntimeError("No TTS data")
            except Exception:
                safe = _strip_html(last_text)
                msg = ("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n" + safe) if interface_lang == "ru" else ("Couldn't voice it; here is the text:\n" + safe)
                logger.exception("[TTS once] failed", exc_info=True)
                await context.bot.send_message(chat_id=chat_id, text=msg)
            return

        # ===== –°–¢–ò–ö–ï–†–´: —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) =====
        if is_greeting(user_input):
            await maybe_send_sticker_user(context, update, "hello", chance=0.45)
        elif is_compliment(user_input):
            await maybe_send_sticker_user(context, update, "fire", chance=0.45)

        # —Å–æ–∑–¥–∞—Ç–µ–ª—å
        norm_for_creator = re.sub(r"[^\w\s]", "", user_input.lower())
        if any(trig in norm_for_creator for trig in CREATOR_TRIGGERS.get(interface_lang, CREATOR_TRIGGERS["en"])):
            reply_text = (
                "üêæ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî @marrona! –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–∞–π—Å—è –ø—Ä—è–º–æ –∫ –Ω–µ–π. üå∑"
                if interface_lang == "ru"
                else "üêæ My creator is @marrona! For feedback or collaboration offers, feel free to contact her directly. üå∑"
            )
            await update.message.reply_text(reply_text)
            return

        # ======== –í–ï–¢–ö–ê: TRANSLATOR MODE ‚Äî –±–∞–π–ø–∞—Å –æ–±—â–µ–≥–æ —á–∞—Ç–∞ ========
        if session.get("task_mode") == "translator":
            direction = (translator_cfg or {}).get("direction", "ui‚Üítarget")
            tr_style  = (translator_cfg or {}).get("style", "casual")
            output    = (translator_cfg or {}).get("output", "text")

            translated = await do_translate(
                user_input,  # –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ –±–µ—Ä—ë–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
                interface_lang=interface_lang,
                target_lang=target_lang,
                direction=direction,
                style=tr_style,
            )

            assistant_reply = translated or ""
            session["last_assistant_text"] = assistant_reply  # –¥–ª—è ¬´–æ–∑–≤—É—á—å¬ª
            tts_lang = interface_lang if direction == "target‚Üíui" else target_lang

            if output == "voice":
                try:
                    voice_path = synthesize_voice(assistant_reply, LANGUAGE_CODES.get(tts_lang, "en-US"), level)
                    if voice_path:
                        await _send_voice_or_audio(context, chat_id, voice_path)
                    else:
                        raise RuntimeError("No TTS data")
                except Exception:
                    logger.exception("[TR TTS] failed", exc_info=True)
                    safe = _strip_html(assistant_reply or "")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n"+safe) if interface_lang=="ru" else ("‚ö†Ô∏è Couldn't voice; text:\n"+safe)
                    )
            else:
                await update.message.reply_text(assistant_reply, parse_mode=None)
            return

        # === –ò—Å—Ç–æ—Ä–∏—è + –ø—Ä–æ–º–ø—Ç (–û–ë–´–ß–ù–´–ô –ß–ê–¢) ===
        history = session.setdefault("history", [])

        # —Ä–∞–∑–æ–≤—ã–π wrap-up –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        wrap_hint = None
        if session.pop("just_left_translator", False):
            wrap_hint = ("You have just exited TRANSLATOR mode. In your next reply (only once), "
                         "you MAY add one very short, upbeat wrap-up line in the TARGET language, "
                         "then continue normal CHAT behavior.")

        system_prompt = get_system_prompt(
            style, level, interface_lang, target_lang, mode,
            task_mode=session.get("task_mode", "chat"),
            translator_cfg=session.get("translator")
        )

        prompt = [{"role": "system", "content": system_prompt}]
        if wrap_hint:
            prompt.append({"role": "system", "content": wrap_hint})
        prompt.extend(history)

        # –ø–æ—á–∏–Ω–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
        clean_user_input, preface_html = await rewrite_mixed_input(user_input, interface_lang, target_lang)
        prompt.append({"role": "user", "content": clean_user_input})

        assistant_reply = await ask_gpt(prompt, "gpt-4o")

        # –∏—Å—Ç–æ—Ä–∏—è
        history.append({"role": "user", "content": clean_user_input})
        history.append({"role": "assistant", "content": assistant_reply})
        if len(history) > MAX_HISTORY_LENGTH:
            history.pop(0)

        # ====== –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: –∞–≤—Ç–æ–¥—É–±–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–∫–æ–±–∫–∞—Ö (A0‚ÄìA1, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ) ======
        append_translation = bool(session.get("append_translation")) and level in {"A0", "A1"}
        final_reply_text = assistant_reply
        ui_side_note = ""

        if append_translation:
            translated = await _translate_for_ui(assistant_reply, interface_lang)
            if translated and _strip_html(translated).lower() != _strip_html(assistant_reply).lower():
                ui_side_note = translated
                final_reply_text = f"{assistant_reply} ({translated})"

        if preface_html:
            final_reply_text = f"{preface_html}\n\n{final_reply_text}"

        # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–∫–æ–±–æ—á–Ω–æ–≥–æ –¥—É–±–ª—è ‚Äî –¥–ª—è ¬´–æ–∑–≤—É—á—å¬ª
        session["last_assistant_text"] = assistant_reply

        # ===== –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ =====
        effective_output = session["mode"]
        if session.get("task_mode") == "translator":
            effective_output = (session.get("translator") or {}).get("output", "text")

        if effective_output == "voice":
            # —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏: –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è; –∏–Ω–∞—á–µ target_lang
            if session.get("task_mode") == "translator":
                direction = (translator_cfg or {}).get("direction", "ui‚Üítarget")
                tts_lang = interface_lang if direction == "target‚Üíui" else target_lang
            else:
                tts_lang = target_lang

            try:
                voice_path = synthesize_voice(assistant_reply, LANGUAGE_CODES.get(tts_lang, "en-US"), level)
                if voice_path:
                    await _send_voice_or_audio(context, chat_id, voice_path)
                else:
                    raise RuntimeError("No TTS data")
            except Exception:
                logger.exception("[TTS reply] failed", exc_info=True)
                await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n" + _strip_html(final_reply_text))

            # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–∞:
            # - –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –¥—É–±–ª—å –∏ —É—Ä–æ–≤–µ–Ω—å A0‚ÄìA1 ‚Äî –æ—Ç–¥–∞—ë–º –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–µ–∑ HTML/—ç–º–æ–¥–∑–∏)
            # - –∏–Ω–∞—á–µ –¥–ª—è A0‚ÄìA2 ‚Äî –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ: –æ—Ç–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ HTML (–æ—Ä–∏–≥–∏–Ω–∞–ª)
            try:
                if append_translation and ui_side_note:
                    await context.bot.send_message(chat_id=chat_id, text=_strip_html(ui_side_note))
                elif level in ["A0", "A1", "A2"]:
                    await context.bot.send_message(chat_id=chat_id, text=_strip_html(final_reply_text))
            except Exception:
                logger.debug("fallback text after voice failed", exc_info=True)

        else:
            await update.message.reply_text(final_reply_text, parse_mode="HTML")

    except Exception:
        logger.exception("[–û–®–ò–ë–ö–ê –≤ handle_message]", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")

# =============== –õ–û–ö–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î–ß–ò–ö –î–õ–Ø –î–£–ë–õ–Ø UI (A0‚ÄìA1) ===============
async def _translate_for_ui(text: str, ui_lang: str) -> str:
    """
    –ú–∏–Ω–∏-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ ask_gpt –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    """
    if not text or not ui_lang:
        return ""
    sys = f"You are a precise translator. Translate the user's message into {ui_lang.upper()} only. Output ONLY the translation. No quotes, no brackets, no commentary, no emojis."
    prompt = [{"role": "system", "content": sys}, {"role": "user", "content": _strip_html(text)}]
    try:
        tr = await ask_gpt(prompt, "gpt-4o-mini")
        tr = (tr or "").strip().strip("¬´¬ª\"' ").replace("\n", " ")
        return tr
    except Exception:
        logger.exception("[auto-translate] failed", exc_info=True)
        return ""

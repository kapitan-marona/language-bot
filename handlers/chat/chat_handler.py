from telegram import Update
from telegram.ext import ContextTypes
from components.gpt_client import ask_gpt
from components.voice import synthesize_voice
from components.mode import MODE_SWITCH_MESSAGES
from state.session import user_sessions
import os

MAX_HISTORY_LENGTH = 40

STYLE_MAP = {
    "casual": (
        "Be relaxed, humorous, and use casual expressions. Use emojis, memes, and playful phrases. "
        "Sound like a cheerful buddy. Stay ultra-positive and fun, like a witty friend."
    ),
    "business": (
        "Respond with a professional, respectful, and slightly formal tone. Avoid emojis unless absolutely necessary. "
        "Maintain a friendly and engaging presence ‚Äî like a smart colleague or helpful mentor. "
        "Do not sound robotic or overly stiff. Keep it human and clear."
    )
}

LANGUAGE_CODES = {
    "en": "en-US",
    "fr": "fr-FR",
    "de": "de-DE",
    "es": "es-ES",
    "ru": "ru-RU"
}

def get_rules_by_level(level: str, interface_lang: str) -> str:
    rules = {
        "A0": {
            "en": "Use the simplest grammar and translate everything you say to English.",
            "ru": "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏ –≤—Å—ë, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å, –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        },
        "A1": {
            "en": "Use simple grammar. Translate only if asked.",
            "ru": "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ.",
        },
        "B1": {
            "en": "Use more advanced grammar. Only translate when requested.",
            "ru": "–ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
        },
        "C1": {
            "en": "Communicate as with a native speaker. No translation unless asked.",
            "ru": "–û–±—â–∞–π—Å—è –∫–∞–∫ —Å –Ω–µ–π—Ç–∏–≤–æ–º. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –±–µ–∑ –ø—Ä–æ—Å—å–±—ã.",
        },
    }
    for key in rules:
        if level.upper().startswith(key):
            return rules[key].get(interface_lang, rules[key]["en"])
    return rules["B1"][interface_lang]  # fallback

def get_greeting_name(lang: str) -> str:
    return "Matt" if lang == "en" else "–ú—ç—Ç—Ç"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_input = update.message.text

    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}

    session = user_sessions[chat_id]
    session.setdefault("interface_lang", "en")
    session.setdefault("target_lang", "en")
    session.setdefault("level", "A1")
    session.setdefault("style", "casual")
    session.setdefault("mode", "text")
    session.setdefault("history", [])

    interface_lang = session["interface_lang"]
    target_lang = session["target_lang"]
    level = session["level"]
    style = session.get("style", "casual").lower()
    mode = session["mode"]
    history = session["history"]

    voice_triggers = ["—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º", "–≤–∫–ª—é—á–∏ –≥–æ–ª–æ—Å", "–æ–∑–≤—É—á—å", "–ø—Ä–æ–∏–∑–Ω–µ—Å–∏", "—Å–∫–∞–∂–∏ —ç—Ç–æ", "–∫–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç", "–¥–∞–≤–∞–π –≥–æ–ª–æ—Å–æ–º"]
    text_triggers = ["–≤–µ—Ä–Ω–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É", "—Ö–æ—á—É —Ç–µ–∫—Å—Ç", "–ø–∏—à–∏", "—Ç–µ–∫—Å—Ç–æ–º", "–Ω–µ –Ω–∞–¥–æ –≥–æ–ª–æ—Å–æ–º"]
    lower_input = user_input.lower()

    if any(trigger in lower_input for trigger in voice_triggers):
        session["mode"] = "voice"
        await update.message.reply_text(MODE_SWITCH_MESSAGES["voice"].get(interface_lang, "Voice mode on."))
        await update.message.reply_text("–¢–æ–ª—å–∫–æ —Å–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º ‚Äî –∏ —è –ø–µ—Ä–µ—Å—Ç–∞–Ω—É –¥–æ—Å—Ç–∞–≤–∞—Ç—å —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ üòÅ")
        return

    elif any(trigger in lower_input for trigger in text_triggers):
        session["mode"] = "text"
        await update.message.reply_text(MODE_SWITCH_MESSAGES["text"].get(interface_lang, "Text mode on."))
        return

    rules = get_rules_by_level(level, interface_lang)
    persona = get_greeting_name(interface_lang)
    style_instructions = STYLE_MAP.get(style, STYLE_MAP["casual"])

    system_prompt = (
        f"You are {persona}, a friendly assistant helping the user learn {target_lang.upper()}.\n"
        f"Always respond ONLY in {target_lang.upper()}.\n"
        f"User level: {level.upper()}. Style: {style}.\n"
        f"{style_instructions}\n"
        f"{rules}"
    )

    if mode == "voice":
        system_prompt += (
            "\nSpeak naturally, as if talking aloud. "
            "Avoid emojis and formatting. Express tone with words, not symbols."
        )
    else:
        system_prompt += "\nWritten responses can include emojis and formatting depending on style."

    history.append({"role": "user", "content": user_input})
    if len(history) > MAX_HISTORY_LENGTH:
        history.pop(0)

    messages = [{"role": "system", "content": system_prompt}] + history

    try:
        response_text = ask_gpt(messages)
        history.append({"role": "assistant", "content": response_text})

        if mode == "voice":
            lang_code = LANGUAGE_CODES.get(target_lang, target_lang)
            audio_path = synthesize_voice(response_text, lang=lang_code, level=level)
            with open(audio_path, "rb") as audio:
                await update.message.reply_voice(voice=audio)
            os.remove(audio_path)
        else:
            await update.message.reply_text(response_text)

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT.")
        print(f"GPT error: {e}")

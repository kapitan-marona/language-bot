
import os
from telegram import Update
from telegram.ext import ContextTypes
from config.config import MAX_HISTORY_LENGTH
from components.voice import transcribe_voice, synthesize_voice
from components.language import LANGUAGE_CODES
from components.prompts import get_system_prompt
from services.gpt import ask_gpt
from state.session import user_sessions

# üîÅ –¢—Ä–∏–≥–≥–µ—Ä—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
voice_triggers = ["—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º", "–≤–∫–ª—é—á–∏ –≥–æ–ª–æ—Å", "–æ–∑–≤—É—á—å", "–ø—Ä–æ–∏–∑–Ω–µ—Å–∏", "—Å–∫–∞–∂–∏ —ç—Ç–æ", "–∫–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç", "–¥–∞–≤–∞–π –≥–æ–ª–æ—Å–æ–º"]
text_triggers = ["–≤–µ—Ä–Ω–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É", "—Ö–æ—á—É —Ç–µ–∫—Å—Ç", "–ø–∏—à–∏", "—Ç–µ–∫—Å—Ç–æ–º"]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat_id

    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}

    session = user_sessions[chat_id]
    interface_lang = session.get("interface_lang", "en")
    target_lang = session.get("target_lang", "en")
    level = session.get("level", "A1")
    style = session.get("style", "casual")
    mode = session.get("mode", "text")
    history = session.setdefault("history", [])

    user_input = None

    # üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.voice:
        voice_file = await context.bot.get_file(message.voice.file_id)
        file_path = f"temp/{chat_id}_voice.ogg"
        await voice_file.download_to_drive(file_path)
        transcript = transcribe_voice(file_path)
        user_input = transcript.strip()
        print("üìù [Whisper] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", user_input)
    elif message.text:
        user_input = message.text.strip()

    if not user_input:
        return

    lowered = user_input.lower()
    if any(trigger in lowered for trigger in voice_triggers):
        session["mode"] = "voice"
        await message.reply_text("Voice mode activated.")
        return
    elif any(trigger in lowered for trigger in text_triggers):
        session["mode"] = "text"
        await message.reply_text("Text mode activated.")
        return

    # üß† –°–±–æ—Ä system prompt –∏ –∏—Å—Ç–æ—Ä–∏—è
    system_prompt = get_system_prompt(style)
    messages = [{"role": "system", "content": system_prompt}] + history + [{"role": "user", "content": user_input}]
    assistant_reply = await ask_gpt(messages)
    print("üí¨ [GPT] –û—Ç–≤–µ—Ç:", repr(assistant_reply))

    # üìú –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    history.append({"role": "user", "content": user_input})
    history.append({"role": "assistant", "content": assistant_reply})
    if len(history) > MAX_HISTORY_LENGTH:
        history.pop(0)

    # üîÅ –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if session.get("mode") == "voice":
        voice_path = synthesize_voice(assistant_reply, LANGUAGE_CODES.get(target_lang, "en-US"), level)
        if voice_path and os.path.exists(voice_path):
            try:
                with open(voice_path, "rb") as vf:
                    await context.bot.send_voice(chat_id=chat_id, voice=vf)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–∞] {e}")
        await message.reply_text(assistant_reply)
    else:
        await message.reply_text(assistant_reply)

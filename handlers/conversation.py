from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from state.session import user_sessions

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ prompt_templates –∏–ª–∏ texts.py
from handlers.chat.prompt_templates import (
    START_MESSAGE, MATT_INTRO, INTRO_QUESTIONS, ONBOARDING_MESSAGE
)

import random

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ (–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è)
SUPPORTED_LANGUAGES = [
    ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
    ("üá¨üáß English", "en"),
    ("üá´üá∑ Fran√ßais", "fr"),
    ("üá™üá∏ Espa√±ol", "es"),
    ("üá©üá™ Deutsch", "de"),
    ("üá∏üá™ Svenska", "sv"),
    ("üá´üáÆ Suomi", "fi"),
]

def get_interface_language_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"interface_lang:{code}")]
        for name, code in SUPPORTED_LANGUAGES
    ]
    return InlineKeyboardMarkup(keyboard)

def get_target_language_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"target_lang:{code}")]
        for name, code in SUPPORTED_LANGUAGES
    ]
    return InlineKeyboardMarkup(keyboard)

PREPARING_MESSAGE = {
    "ru": "‚å®Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Ä¶",
    "en": "‚å®Ô∏è Preparing‚Ä¶"
}

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –°–±—Ä–æ—Å –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[chat_id] = {}
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    interface_lang = context.user_data.get("interface_lang", "ru")
    await update.message.reply_text(
        PREPARING_MESSAGE.get(interface_lang, PREPARING_MESSAGE["en"]),
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await update.message.reply_text(
        ONBOARDING_MESSAGE,
        reply_markup=get_interface_language_keyboard()
    )

async def interface_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["interface_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_target_lang"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    await query.edit_message_text(
        text="üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:" if lang_code == "ru" else "üåç Choose a language to learn:",
        reply_markup=get_target_language_keyboard()
    )

# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ target_lang –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ
async def target_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["target_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_level"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è (—Ç—ã –º–æ–∂–µ—à—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å get_level_keyboard)
    from components.levels import get_level_keyboard
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:" if session["interface_lang"] == "ru" else "Choose your level:",
        reply_markup=get_level_keyboard(session["interface_lang"])
    )

# –î–∞–ª—å—à–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
async def onboarding_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "en")
    target_lang = session.get("target_lang", interface_lang)
    await context.bot.send_message(
        chat_id=chat_id,
        text=MATT_INTRO.get(interface_lang, MATT_INTRO["en"])
    )
    question = random.choice(INTRO_QUESTIONS.get(target_lang, INTRO_QUESTIONS["en"]))
    await context.bot.send_message(chat_id=chat_id, text=question)

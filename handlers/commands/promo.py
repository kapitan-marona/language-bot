from __future__ import annotations
from datetime import datetime, timedelta, timezone
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from components.profile_db import get_user_profile, save_user_profile
from components.promo import check_promo_code, activate_promo, normalize_code
from components.i18n import get_ui_lang  # NEW

def _plural_ru_days(n: int) -> str:
    n = abs(n)
    if 11 <= (n % 100) <= 14:
        return "–¥–Ω–µ–π"
    last = n % 10
    if last == 1:
        return "–¥–µ–Ω—å"
    if 2 <= last <= 4:
        return "–¥–Ω—è"
    return "–¥–Ω–µ–π"

def format_promo_status_for_user(p: dict, ui: str | None = None) -> str:  # CHANGED
    """–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é UI-–ª–æ–∫–∞–ª—å, –∑–∞—Ç–µ–º –ø—Ä–æ—Ñ–∏–ª—å."""
    # NEW: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —è–∑—ã–∫; –∏–Ω–∞—á–µ ‚Äî –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è; –¥–µ—Ñ–æ–ª—Ç ‚Äî en
    ui = ui or p.get("interface_lang") or p.get("target_lang") or "en"  # NEW

    activated = p.get("promo_activated_at")
    days = int(p.get("promo_days") or 0)
    if not activated or not days:
        return "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω." if ui == "ru" else "Promo code is not activated."
    try:
        dt = datetime.fromisoformat(activated)
        if dt.tzinfo is None:  # NEW: –¥–µ–ª–∞–µ–º TZ-aware
            dt = dt.replace(tzinfo=timezone.utc)
    except Exception:
        dt = None
    until = dt + timedelta(days=days) if dt else None

    if ui == "ru":
        return f"üéü –ü—Ä–æ–º–æ –∞–∫—Ç–∏–≤–Ω–æ: {days} {_plural_ru_days(days)}. –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {until.astimezone().strftime('%d.%m.%Y') if until else '‚Äî'}."
    else:
        return f"üéü Promo active: {days} days. Valid until {until.astimezone().strftime('%Y-%m-%d') if until else '‚Äî'}."

async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /promo              ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    /promo <–∫–æ–¥>        ‚Üí –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å (+ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ª–∏–º–∏—Ç —Å–Ω—è—Ç)
    """
    chat_id = update.effective_chat.id
    ui = get_ui_lang(update, context)  # NEW
    args = context.args or []

    profile = get_user_profile(chat_id) or {}

    if not args:
        await update.effective_message.reply_text(format_promo_status_for_user(profile, ui))  # CHANGED
        return

    code = normalize_code(" ".join(args))
    ok, msg, info = check_promo_code(code, profile)
    if ok:
        activate_promo(chat_id, info)
        profile = get_user_profile(chat_id) or profile
        save_user_profile(
            chat_id,
            promo_code_used=profile.get("promo_code_used"),
            promo_type=profile.get("promo_type"),
            promo_activated_at=profile.get("promo_activated_at"),
            promo_days=profile.get("promo_days"),
        )
        await update.effective_message.reply_text(format_promo_status_for_user(profile, ui))  # CHANGED
        tail = ("‚úÖ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω—è—Ç ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!" if ui == "ru"
                else "‚úÖ Message limit removed ‚Äî you can continue!")
        await update.effective_message.reply_text(tail)
        return
    else:
        # NEW: –µ—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –¥–∞—ë—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ msg ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–ª–±—ç–∫
        fallback = "‚ö†Ô∏è –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" if ui == "ru" else "‚ö†Ô∏è failed to activate promo code"
        await update.effective_message.reply_text(msg or fallback)
        return

from __future__ import annotations
from datetime import datetime, timezone  # NEW
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from components.offer_texts import OFFER
from components.profile_db import get_user_profile
from components.usage_db import get_usage
from components.access import has_access
from components.i18n import get_ui_lang  # NEW


def _offer_text(key: str, lang: str) -> str:  # NEW: –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –∏–∑ OFFER —Å —Ñ–æ–ª–±—ç–∫–æ–º
    d = OFFER.get(key) if isinstance(OFFER, dict) else None
    if not isinstance(d, dict):
        return ""
    if lang in d:
        return d[lang]
    return d.get("en") or d.get("ru") or next(iter(d.values()), "")


def _help_text(user_id: int, ui: str) -> str:
    used = get_usage(user_id)

    if has_access(user_id):
        header = _offer_text("help_premium_header", ui) or (  # NEW
            ("–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø" if ui == "ru" else "Premium access")
        )
        profile = get_user_profile(user_id) or {}
        exp = profile.get("premium_expires_at") or "‚Äî"
        # NEW: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        until = "‚Äî"
        try:
            if exp and exp != "‚Äî":
                dt = datetime.fromisoformat(exp)
                if dt.tzinfo is None:
                    dt = dt.replace(tzinfo=timezone.utc)
                until = dt.date().isoformat()
        except Exception:
            until = "‚Äî"

        card_tpl = _offer_text("premium_card", ui) or (  # NEW
            ("üéü –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {date}. –°–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {used}/‚àû"
             if ui == "ru"
             else "üéü Premium active until {date}. Messages today: {used}/‚àû")
        )
        card = card_tpl.format(date=until, used=used)
    else:
        header = _offer_text("help_free_header", ui) or (  # NEW
            ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø" if ui == "ru" else "Free access")
        )
        card_tpl = _offer_text("free_card", ui) or (  # NEW
            ("üîì –°–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {used}/15" if ui == "ru" else "üîì Messages today: {used}/15")
        )
        card = card_tpl.format(used=used)

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚Äî –≤—Å–µ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ english_bot.py
    # /start ‚Äî –∑–∞–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ send_onboarding)
    # /reset ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ + –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    # /buy ‚Äî –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Stars (invoice)
    # /donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–∫–Ω–æ–ø–∫–∞ –≤–µ–¥—ë—Ç –∫ htp_buy)
    # /promo ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥
    # /teach, /glossary ‚Äî —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    common = _offer_text("help_body_common", ui) or (  # NEW
        ("–ö–æ–º–∞–Ω–¥—ã:\n"
         "/buy ‚Äî –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n"
         "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
         "/promo ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
         "/lang ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞/–ø—Ä–∞–∫—Ç–∏–∫–∏\n"
         "/glossary ‚Äî –ª–∏—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")
        if ui == "ru" else
        ("Commands:\n"
         "/buy ‚Äî get 30-day access\n"
         "/donate ‚Äî support the project\n"
         "/promo ‚Äî apply a promo code\n"
         "/lang ‚Äî change interface/practice language\n"
         "/glossary ‚Äî your translation corrections")
    )

    return f"*{header}*\n{card}\n\n{common}"  # CHANGED: header —É–∂–µ –∂–∏—Ä–Ω—ã–π


def _help_keyboard(ui: str, premium: bool) -> InlineKeyboardMarkup:
    # –í—Å–µ callback_data –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º:
    # open:settings -> handlers/callbacks/menu.menu_router => "/donate", "/promo", "/buy" –∏ —Ç.–ø.
    # htp_start     -> handlers/callbacks/how_to_pay_game.how_to_pay_entry (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ ¬´–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?¬ª)
    # htp_buy       -> handlers/callbacks/how_to_pay_game.how_to_pay_go_buy -> buy_command (invoice)
    rows = []

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –º–µ–Ω—é)
    rows.append([InlineKeyboardButton("‚öôÔ∏è Settings" if ui == "en" else "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open:settings")])

    # –û–ø–ª–∞—Ç–∞
    buy_label = "Buy 30 days ‚Äî 149 ‚≠ê" if ui == "en" else "–ö—É–ø–∏—Ç—å 30 –¥–Ω–µ–π ‚Äî 149 ‚≠ê"
    how_label = "How to pay?" if ui == "en" else "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?"
    rows.append([
        InlineKeyboardButton(buy_label, callback_data="htp_buy"),
        InlineKeyboardButton(how_label, callback_data="htp_start"),
    ])

    # –ü—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    promo_label = "Promo code" if ui == "en" else "–ü—Ä–æ–º–æ–∫–æ–¥"
    donate_label = "Support" if ui == "en" else "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
    rows.append([
        InlineKeyboardButton(promo_label, callback_data="open:promo"),
        InlineKeyboardButton(donate_label, callback_data="open:donate"),
    ])

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (—É–¥–æ–±–Ω–æ –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö)
    rows.append([
        InlineKeyboardButton("/teach", callback_data="open:teach"),
        InlineKeyboardButton("/glossary", callback_data="open:glossary"),
    ])

    # –ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã / —Å—Å—ã–ª–∫–∏ –±–æ—Ç-–∫–æ–º–∞–Ω–¥ ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ (—Å–º. _help_text)
    return InlineKeyboardMarkup(rows)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ui = get_ui_lang(update, context)  # NEW
    user_id = update.effective_user.id
    is_premium = has_access(user_id)

    text = _help_text(user_id, ui)
    kb = _help_keyboard(ui, is_premium)

    # –í /help –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ message
    await update.message.reply_markdown(text, reply_markup=kb)

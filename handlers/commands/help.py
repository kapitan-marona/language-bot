# handlers/commands/help.py
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import ContextTypes
from components.profile_db import get_user_profile


def _ui_lang(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ru/en)."""
    return (context.user_data or {}).get("ui_lang", "ru")


def _lang_human_name(code: str) -> str:
    """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞."""
    return {"en": "English", "es": "Espa√±ol", "de": "Deutsch"}.get(code, code.upper())


def _extract_promo(profile: dict | None) -> tuple[str | None, str | None]:
    """–î–æ—Å—Ç–∞—ë–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å—Ä–æ–∫: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º p['promo']={code,expires} –∏ –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è."""
    p = profile or {}
    promo = p.get("promo")
    code = expires = None
    if isinstance(promo, dict):
        code = promo.get("code")
        expires = promo.get("expires")
    else:
        code = p.get("promo_code") or p.get("promoCode")
        expires = p.get("promo_expires") or p.get("promoExpires")
    return code, expires


def _help_text_ru(profile: dict | None) -> str:
    p = profile or {}
    lang_code = p.get("target_lang", "en")
    level = p.get("level", "B1")
    style = {"casual": "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "business": "–î–µ–ª–æ–≤–æ–π"}.get(
        p.get("style", "casual"), p.get("style", "casual")
    )
    code, expires = _extract_promo(p)
    promo_line = (
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {code} ‚Äî –¥–æ {expires}" if (code and expires) else "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: –Ω–µ —É–∫–∞–∑–∞–Ω"
    )
    return (
        "üìñ –ü–æ–º–æ—â—å —É–∂–µ –∑–¥–µ—Å—å!\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —è–∑—ã–∫ ‚Äî {_lang_human_name(lang_code)}, —É—Ä–æ–≤–µ–Ω—å ‚Äî {level}, —Å—Ç–∏–ª—å ‚Äî {style}.\n"
        f"{promo_line}\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî /settings\n"
        "‚Ä¢ –ú–µ–Ω—è–π —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.\n\n"
        "üéõ <b>–†–µ–∂–∏–º</b> ‚Äî /mode\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π, –∫–∞–∫ –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è.\n\n"
        "üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥</b> ‚Äî /promo\n"
        "‚Ä¢ –£–∑–Ω–∞–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞.\n\n"
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )


def _help_text_en(profile: dict | None) -> str:
    p = profile or {}
    lang_code = p.get("target_lang", "en")
    level = p.get("level", "B1")
    style = {"casual": "Casual", "business": "Business"}.get(
        p.get("style", "casual"), p.get("style", "casual")
    )
    code, expires = _extract_promo(p)
    promo_line = (
        f"üéüÔ∏è Promo code: {code} ‚Äî until {expires}" if (code and expires) else "üéüÔ∏è Promo code: none"
    )
    return (
        "üìñ Help is already here!\n\n"
        f"Current: language ‚Äî {_lang_human_name(lang_code)}, level ‚Äî {level}, style ‚Äî {style}.\n"
        f"{promo_line}\n\n"
        "‚öôÔ∏è <b>Settings</b> ‚Äî /settings\n"
        "‚Ä¢ Change language, level, and chat style.\n\n"
        "üéõ <b>Mode</b> ‚Äî /mode\n"
        "‚Ä¢ Choose how we chat.\n\n"
        "üéüÔ∏è <b>Promo code</b> ‚Äî /promo\n"
        "‚Ä¢ Check your code expiry.\n\n"
        "üí¨ <b>Feedback</b>\n"
        "‚Ä¢ Message the developer."
    )


def _inline_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–æ–º–æ—â–∏ (–±–µ–∑ ReplyKeyboard)."""
    btn_settings = InlineKeyboardButton(
        text=("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" if lang == "ru" else "‚öôÔ∏è Settings"),
        callback_data="HELP:OPEN:SETTINGS",
    )
    btn_mode = InlineKeyboardButton(
        text=("üéõ –†–µ–∂–∏–º" if lang == "ru" else "üéõ Mode"),
        callback_data="HELP:OPEN:MODE",
    )
    btn_promo = InlineKeyboardButton(
        text=("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥" if lang == "ru" else "üéüÔ∏è Promo"),
        callback_data="HELP:OPEN:PROMO",
    )
    btn_contact = InlineKeyboardButton(
        text=("üí¨‚ú® –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É" if lang == "ru" else "üí¨‚ú® Message the developer"),
        url="https://t.me/marrona",
    )
    return InlineKeyboardMarkup([[btn_settings, btn_mode, btn_promo], [btn_contact]])


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ—Ç –≤–∏—Å—è—â—É—é ReplyKeyboard."""
    if update.message:
        try:
            await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())
        except Exception:
            pass

    lang = _ui_lang(context)
    user_id = update.effective_user.id if update and update.effective_user else None
    profile = get_user_profile(user_id) if user_id else {}

    # –Ω–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ user_data)
    profile["target_lang"] = profile.get("target_lang") or (context.user_data or {}).get("language", "en")

    text = _help_text_ru(profile) if lang == "ru" else _help_text_en(profile)

    if update.message:
        await update.message.reply_html(text, reply_markup=_inline_keyboard(lang))
    else:
        await update.effective_chat.send_message(text, reply_markup=_inline_keyboard(lang))


async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
    q = update.callback_query
    if not q:
        return

    await q.answer()
    data = (q.data or "")
    if not data.startswith("HELP:OPEN:"):
        return

    action = data.split(":", 2)[-1]
    chat_id = q.message.chat.id
    lang = _ui_lang(context)

    if action == "SETTINGS":
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        from handlers.settings import cmd_settings
        return await cmd_settings(update, context)

    if action == "MODE":
        try:
            from components.mode import get_mode_keyboard
            current_mode = context.user_data.get("mode", "text")
            kb = get_mode_keyboard(current_mode, lang)
            await context.bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏, –∫–∞–∫ –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è:" if lang == "ru" else "Choose how we chat:",
                reply_markup=kb,
            )
        except Exception:
            await context.bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å /mode" if lang == "ru" else "Send /mode")
        return

    if action == "PROMO":
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è /help)
        profile = get_user_profile(q.from_user.id) or {}
        code, expires = _extract_promo(profile)
        if code and expires:
            text = (
                f"üéüÔ∏è –¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {code}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expires}."
                if lang == "ru"
                else f"üéüÔ∏è Your promo code: {code}\nValid until {expires}."
            )
        else:
            text = (
                "üéüÔ∏è –ü–æ—Ö–æ–∂–µ, –∫–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ! –ü—Ä–∏—à–ª—ë—à—å, –∫–∞–∫ –±—É–¥–µ—Ç üòâ"
                if lang == "ru"
                else "üéüÔ∏è Looks like we don‚Äôt have a code yet ‚Äî no rush! Send it when you do üòâ"
            )
        await context.bot.send_message(chat_id, text)
        return

# handlers/commands/help.py
from __future__ import annotations
from datetime import datetime, timedelta, timezone
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import ContextTypes

from components.profile_db import get_user_profile


def _ui_lang(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)."""
    return (context.user_data or {}).get("ui_lang", "ru")


# ---------- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ ----------

def _help_text_ru() -> str:
    return (
        "‚ú® –ü–æ–º–æ—â—å —É–∂–µ –∑–¥–µ—Å—å!\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî /settings\n"
        "‚Ä¢ –ú–µ–Ω—è–π —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥–µ.\n\n"
        "üéõ <b>–†–µ–∂–∏–º</b> ‚Äî /mode\n"
        "‚Ä¢ –ú–µ–Ω—è–π —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´—Ç–µ–∫—Å—Ç¬ª –∏–ª–∏ ¬´–≥–æ–ª–æ—Å¬ª, –∏ –ú—ç—Ç—Ç –ø–æ–π–º—ë—Ç.\n\n"
        "üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥</b> ‚Äî /promo\n"
        "‚Ä¢ –£–∑–Ω–∞–π, —Å–∫–æ–ª—å–∫–æ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–µ –∑–∞–±—ã–ª –ª–∏ —Ç—ã –µ–≥–æ –≤–≤–µ—Å—Ç–∏.\n\n"
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n"
        "‚Ä¢ –°–ø—Ä–æ—Å–∏ —É –ú—ç—Ç—Ç–∞, –∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª ‚Äî –æ–Ω –¥–∞—Å—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. "
        "–¢—É–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "‚Ä¶–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–æ–≤–∏ /help –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç üòä"
    )


def _help_text_en() -> str:
    return (
        "‚ú® Help is here!\n\n"
        "‚öôÔ∏è <b>Settings</b> ‚Äî /settings\n"
        "‚Ä¢ Change your language, level, and chat style.\n\n"
        "üéõ <b>Mode</b> ‚Äî /mode\n"
        "‚Ä¢ Switch between text and voice anytime. You can just type ‚Äútext‚Äù or ‚Äúvoice‚Äù ‚Äî Matt will get it.\n\n"
        "üéüÔ∏è <b>Promo code</b> ‚Äî /promo\n"
        "‚Ä¢ Check how long your promo is valid and whether you‚Äôve added it.\n\n"
        "üí¨ <b>Feedback</b>\n"
        "‚Ä¢ Ask Matt who created him ‚Äî he‚Äôll send a link to the developer for feedback or collaboration.\n\n"
        "‚Ä¶or simply call /help anytime üòä"
    )


def _inline_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–±–µ–∑ ReplyKeyboard, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª–æ—Å—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)."""
    btn_settings = InlineKeyboardButton(
        text=("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" if lang == "ru" else "‚öôÔ∏è Settings"),
        callback_data="HELP:OPEN:SETTINGS",
    )
    btn_mode = InlineKeyboardButton(
        text=("üéõ –†–µ–∂–∏–º" if lang == "ru" else "üéõ Mode"),
        callback_data="HELP:OPEN:MODE",
    )
    btn_promo = InlineKeyboardButton(
        text=("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥" if lang == "ru" else "üéüÔ∏è Promo"),
        callback_data="HELP:OPEN:PROMO",
    )
    btn_contact = InlineKeyboardButton(
        text=("üí¨‚ú® –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É" if lang == "ru" else "üí¨‚ú® Message the developer"),
        url="https://t.me/marrona",
    )
    return InlineKeyboardMarkup([[btn_settings, btn_mode, btn_promo], [btn_contact]])


# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ----------

def _format_promo_status_from_profile(p: dict, ui: str) -> str:
    """
    –û–∂–∏–¥–∞–µ–º –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è:
      promo_code_used: str | None
      promo_type: 'timed' | 'permanent' | 'english_only' | None
      promo_activated_at: ISO-—Å—Ç—Ä–æ–∫–∞ (UTC) | None
      promo_days: int | None
    """
    code = p.get("promo_code_used")
    ptype = p.get("promo_type")
    act = p.get("promo_activated_at")
    days = p.get("promo_days")

    if not code or not ptype:
        return "üéüÔ∏è –ö–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏ —á–µ—Ä–µ–∑ /promo." if ui == "ru" else "üéüÔ∏è No code yet ‚Äî add via /promo."

    if ptype == "permanent":
        return (f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ {code}: –±–µ—Å—Å—Ä–æ—á–Ω–æ.") if ui == "ru" else (f"üéüÔ∏è Promo {code}: permanent.")

    if ptype == "english_only":
        return (
            f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ {code}: –±–µ—Å—Å—Ä–æ—á–Ω—ã–π, –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."
            if ui == "ru"
            else f"üéüÔ∏è Promo {code}: permanent, English only."
        )

    if ptype == "timed" and act and days:
        try:
            dt = datetime.fromisoformat(act)
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
            end = dt + timedelta(days=int(days))
            left = (end.date() - datetime.now(timezone.utc).date()).days
            if left < 0:
                return "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫." if ui == "ru" else "üéüÔ∏è Promo expired."
            if left == 0:
                return "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!" if ui == "ru" else "üéüÔ∏è Promo expires today!"
            # —Ä—É—Å—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
            return (
                f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω: –æ—Å—Ç–∞–ª–æ—Å—å {left} –¥–Ω."
                if ui == "ru"
                else f"üéüÔ∏è Promo active: {left} days left."
            )
        except Exception:
            return "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–≤—Ä–µ–º–µ–Ω–Ω–æ–π)." if ui == "ru" else "üéüÔ∏è Promo active (timed)."

    return "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω." if ui == "ru" else "üéüÔ∏è Promo active."


# ---------- –ö–æ–º–∞–Ω–¥—ã / –∫–æ–ª–±—ç–∫–∏ ----------

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–º–æ—â–∏ –∏ –ø—Ä—è—á–µ—Ç –∑–∞–≤–∏—Å—à—É—é ReplyKeyboard (–µ—Å–ª–∏ –±—ã–ª–∞)."""
    if update.message:
        # –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É Telegram –∏–Ω–æ–≥–¥–∞ —Ä—É–≥–∞–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        try:
            await update.message.reply_text("\u2063", reply_markup=ReplyKeyboardRemove())
        except Exception:
            pass

    lang = _ui_lang(context)
    text = _help_text_ru() if lang == "ru" else _help_text_en()

    if update.message:
        await update.message.reply_html(text, reply_markup=_inline_keyboard(lang))
    else:
        await update.effective_chat.send_message(text, reply_markup=_inline_keyboard(lang))


async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏–∑ /help (–ø–∞—Ç—Ç–µ—Ä–Ω ^HELP:OPEN:)."""
    q = update.callback_query
    if not q:
        return
    await q.answer()

    data = (q.data or "")
    if not data.startswith("HELP:OPEN:"):
        return

    action = data.split(":", 2)[-1]
    chat_id = q.message.chat.id
    lang = _ui_lang(context)

    if action == "SETTINGS":
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        from handlers.settings import cmd_settings
        return await cmd_settings(update, context)

    if action == "MODE":
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –º–µ–Ω—é –ø–æ–º–æ—â–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        try:
            from components.mode import get_mode_keyboard
            current_mode = context.user_data.get("mode", "text")
            kb = get_mode_keyboard(current_mode, lang)
            await context.bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏, –∫–∞–∫ –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è:" if lang == "ru" else "Choose how we chat:",
                reply_markup=kb,
            )
        except Exception:
            await context.bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å /mode" if lang == "ru" else "Send /mode")
        return

    if action == "PROMO":
        profile = get_user_profile(chat_id) or {}
        line = _format_promo_status_from_profile(profile, lang)
        await context.bot.send_message(chat_id, line)
        return

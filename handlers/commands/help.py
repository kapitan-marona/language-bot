# handlers/commands/help.py
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes


def _ui_lang(context: ContextTypes.DEFAULT_TYPE) -> str:
    return (context.user_data or {}).get("ui_lang", "ru")


def _help_text_ru() -> str:
    return (
        "–ü–æ–º–æ—â—å —É–∂–µ –∑–¥–µ—Å—å!\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî /settings\n"
        "‚Ä¢ –ú–µ–Ω—è–π —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.\n\n"
        "üéõ <b>–†–µ–∂–∏–º</b> ‚Äî /mode\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π, –∫–∞–∫ –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è.\n\n"
        "üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥</b> ‚Äî /promo\n"
        "‚Ä¢ –£–∑–Ω–∞–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞.\n\n"
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )


def _help_text_en() -> str:
    return (
        "Help is already here!\n\n"
        "‚öôÔ∏è <b>Settings</b> ‚Äî /settings\n"
        "‚Ä¢ Change language, level, and chat style.\n\n"
        "üéõ <b>Mode</b> ‚Äî /mode\n"
        "‚Ä¢ Choose how we chat.\n\n"
        "üéüÔ∏è <b>Promo code</b> ‚Äî /promo\n"
        "‚Ä¢ Check your code expiry.\n\n"
        "üí¨ <b>Feedback</b>\n"
        "‚Ä¢ Message the developer."
    )


def _inline_keyboard(lang: str) -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ callback_data ‚Äî —Å—Ä–∞–∑—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    btn_settings = InlineKeyboardButton(
        text=("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" if lang == "ru" else "‚öôÔ∏è Settings"),
        callback_data="HELP:OPEN:SETTINGS",
    )
    btn_mode = InlineKeyboardButton(
        text=("üéõ –†–µ–∂–∏–º" if lang == "ru" else "üéõ Mode"),
        callback_data="HELP:OPEN:MODE",
    )
    btn_promo = InlineKeyboardButton(
        text=("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥" if lang == "ru" else "üéüÔ∏è Promo"),
        callback_data="HELP:OPEN:PROMO",
    )
    btn_contact = InlineKeyboardButton(
        text=("üí¨‚ú® –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É" if lang == "ru" else "üí¨‚ú® Message the developer"),
        url="https://t.me/marrona",
    )
    return InlineKeyboardMarkup([[btn_settings, btn_mode, btn_promo], [btn_contact]])


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = _ui_lang(context)
    text = _help_text_ru() if lang == "ru" else _help_text_en()

    if update.message:
        await update.message.reply_html(text, reply_markup=_inline_keyboard(lang))
    else:
        await update.effective_chat.send_message(text, reply_markup=_inline_keyboard(lang))


# Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏–∑ /help
async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()
    data = (q.data or "")
    if not data.startswith("HELP:OPEN:"):
        return

    action = data.split(":", 2)[-1]
    if action == "SETTINGS":
        from handlers.settings import cmd_settings
        return await cmd_settings(update, context)
    if action == "MODE":
        try:
            from english_bot import mode_command
            return await mode_command(update, context)
        except Exception:
            lang = _ui_lang(context)
            return await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å /mode" if lang == "ru" else "Send /mode")
    if action == "PROMO":
        try:
            from handlers.commands.promo import promo_command
            return await promo_command(update, context)
        except Exception:
            lang = _ui_lang(context)
            return await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å /promo" if lang == "ru" else "Send /promo")

from __future__ import annotations
import asyncio, time, os, aiohttp
from telegram import Update
from telegram.ext import ContextTypes

from components.admins import ADMIN_IDS
from components.profile_db import get_all_chat_ids
from components.promo import PROMO_CODES
from state.session import user_sessions

# >>> ADDED: –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è –∏–∑ user_usage
from components.usage_db import _connect as usage_connect  # >>> ADDED

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def _check_admin(update: Update) -> bool:
    user_id = update.effective_user.id if update.effective_user else None
    return bool(user_id and user_id in ADMIN_IDS)


# === /adm_help ===
async def adm_help_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _check_admin(update):
        await update.message.reply_text("‚õîÔ∏è")
        return

    text = (
        "üëë <b>Admin commands</b>\n\n"
        "/users ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/test ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ uptime)\n"
        "/adm_promo ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º\n"
        "/adm_stars ‚Äî –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –±–æ—Ç–∞\n"
        "/adm_help ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"
    )

    await update.message.reply_html(text)


# === /adm_promo ===
async def adm_promo_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _check_admin(update):
        await update.message.reply_text("‚õîÔ∏è")
        return

    try:
        total_codes = len(PROMO_CODES)
        types = {}
        for code, info in PROMO_CODES.items():
            t = info.get("type", "unknown")
            types[t] = types.get(t, 0) + 1

        text = ["üìä <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>"]
        text.append(f"–í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {total_codes}")
        for t, n in types.items():
            text.append(f"‚Ä¢ {t}: {n}")

        await update.message.reply_html("\n".join(text))
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


# === /broadcast ===
async def broadcast_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _check_admin(update):
        await update.message.reply_text("‚õîÔ∏è")
        return

    text = " ".join(ctx.args).strip() if ctx.args else ""
    if not text and update.message and update.message.reply_to_message:
        text = (update.message.reply_to_message.text or "").strip()
    if not text:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        chat_ids = get_all_chat_ids()
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    sent, failed = 0, 0
    for chat_id in chat_ids:
        try:
            await ctx.bot.send_message(chat_id=chat_id, text=text)
            sent += 1
        except Exception:
            failed += 1
        await asyncio.sleep(0.05)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}\n–í—Å–µ–≥–æ: {len(chat_ids)}"
    )


# === /test ===
START_TS = time.time()
async def test_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _check_admin(update):
        await update.message.reply_text("‚õîÔ∏è")
        return
    uptime = int(time.time() - START_TS)
    await update.message.reply_text(f"‚úÖ OK\nUptime: {uptime}s")


# === /users ===
async def users_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not _check_admin(update):
        await update.message.reply_text("‚õîÔ∏è")
        return
    try:
        chat_ids = get_all_chat_ids()
        await update.message.reply_text(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(chat_ids)}")
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


# === /stats ===
# >>> CHANGED: –¥–µ–ª–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é —Å–≤–æ–¥–∫—É: Users (DB) / Sessions (RAM) / Messages today
async def stats_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):  # >>> CHANGED
    if not _check_admin(update):                                         # >>> CHANGED
        await update.message.reply_text("‚õîÔ∏è")                            # >>> CHANGED
        return                                                           # >>> CHANGED
                                                                         # >>> CHANGED
    try:                                                                 # >>> CHANGED
        users = len(get_all_chat_ids())                                  # >>> CHANGED
    except Exception:                                                    # >>> CHANGED
        users = 0                                                        # >>> CHANGED
    sessions = len(user_sessions)                                        # >>> CHANGED
                                                                         # >>> CHANGED
    msgs_today = "n/a"                                                   # >>> CHANGED
    try:                                                                 # >>> CHANGED
        con, cur = usage_connect()                                       # >>> CHANGED
        from datetime import datetime, timezone                          # >>> CHANGED
        today = datetime.now(timezone.utc).date().isoformat()            # >>> CHANGED
        cur.execute("SELECT SUM(used_count) FROM user_usage WHERE date_utc=?", (today,))  # >>> CHANGED
        row = cur.fetchone()                                             # >>> CHANGED
        msgs_today = int(row[0]) if row and row[0] is not None else 0    # >>> CHANGED
        con.close()                                                      # >>> CHANGED
    except Exception:                                                    # >>> CHANGED
        pass                                                             # >>> CHANGED
                                                                         # >>> CHANGED
    await update.message.reply_html(                                     # >>> CHANGED
        "üìä <b>Stats</b>\n"                                              # >>> CHANGED
        f"üë• Users (DB): {users}\n"                                      # >>> CHANGED
        f"üß† Sessions (RAM): {sessions}\n"                                # >>> CHANGED
        f"‚úâÔ∏è Messages today: {msgs_today}"                               # >>> CHANGED
    )                                                                    # >>> CHANGED


# === /adm_stars ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

def _format_stars(amount: int, nano: int | None) -> str:
    nano = int(nano or 0)
    if nano <= 0:
        return str(int(amount))
    frac = f"{nano:09d}".rstrip("0")
    return f"{int(amount)}.{frac}"

async def adm_stars_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API."""
    uid = update.effective_user.id if update.effective_user else None
    if not uid or uid not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not TELEGRAM_TOKEN:
        await update.message.reply_text("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMyStarBalance"

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url) as resp:
                data = await resp.json()

        if not data.get("ok"):
            desc = data.get("description") or "unknown error"
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞: {desc}")
            return

        res = data.get("result") or {}
        amount = int(res.get("amount", 0))
        nano = int(res.get("nanostar_amount", 0))

        stars_text = _format_stars(amount, nano)
        stars_float = amount + (nano / 1_000_000_000)
        euros = stars_float * 0.01  # 1 Star ‚âà ‚Ç¨0.01

        await update.message.reply_text(
            f"‚≠ê –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {stars_text} Stars\n"
            f"üí∂ –í –µ–≤—Ä–æ: ~ {euros:.2f} ‚Ç¨"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from components.profile_db import save_user_gender
from components.levels import get_level_keyboard, LEVEL_PROMPT
from components.language import get_target_language_keyboard, TARGET_LANG_PROMPT
from components.mode import get_mode_keyboard, MODE_SWITCH_MESSAGES
from components.style import get_style_keyboard, get_intro_by_level_and_style, STYLE_LABEL_PROMPT
from components.onboarding import get_onboarding_message
from state.session import user_sessions
import random  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞

def get_gender_prompt_and_keyboard(lang_code):
    if lang_code == "ru":
        return (
            "–°–ø—Ä–æ—à—É —Ñ–æ—Ä–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ç–µ–±–µ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ª–æ–≤–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π üòÖ",
            [
                [InlineKeyboardButton("–º—É–∂", callback_data="gender_male"),
                 InlineKeyboardButton("–∂–µ–Ω", callback_data="gender_female"),
                 InlineKeyboardButton("–¥—Ä—É–≥", callback_data="gender_friend")]
            ]
        )
    else:
        return (
            "I‚Äôll ask how to address you right away to avoid any awkward moments üòÖ",
            [
                [InlineKeyboardButton("male", callback_data="gender_male"),
                 InlineKeyboardButton("female", callback_data="gender_female"),
                 InlineKeyboardButton("friend", callback_data="gender_friend")]
            ]
        )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async def proceed_onboarding(chat_id, session, context):
        stage = session.get("onboarding_stage")
        lang_code = session.get("interface_lang", "en")

        if stage == "awaiting_level":
            prompt = LEVEL_PROMPT.get(lang_code, LEVEL_PROMPT["en"])
            keyboard = get_level_keyboard()  # ‚úÖ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            await context.bot.send_message(chat_id=chat_id, text=prompt, reply_markup=keyboard)  # ‚úÖ keyboard —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç InlineKeyboardMarkup)

        elif stage == "awaiting_style":
            prompt = STYLE_LABEL_PROMPT.get(lang_code, STYLE_LABEL_PROMPT["en"])
            keyboard = get_style_keyboard()
            await context.bot.send_message(chat_id=chat_id, text=prompt, reply_markup=keyboard)

    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    # –í—Å–µ–≥–¥–∞! –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}
    session = user_sessions[chat_id]

    # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.delete()

    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if data.startswith("lang_"):
        lang_code = data.split("_")[1]
        session["interface_lang"] = lang_code
        session["onboarding_stage"] = "awaiting_level"
        await context.bot.send_message(
    chat_id=chat_id,
    text={
        "ru": f"–†–æ–¥–Ω–æ–π —è–∑—ã–∫ ‚Äî {lang_code.upper()} ‚úÖ",
        "en": f"Native language ‚Äî {lang_code.upper()} ‚úÖ"
    }.get(lang_code, f"Native language ‚Äî {lang_code.upper()} ‚úÖ")
)
        await proceed_onboarding(chat_id, session, context)

    elif data.startswith("level_"):
        level = data.split("_")[1]
        session["level"] = level
        session["onboarding_stage"] = "awaiting_style"
        await context.bot.send_message(chat_id=chat_id, text=f"Level - {level} ‚úÖ")
        await proceed_onboarding(chat_id, session, context)

    elif data.startswith("style_"):
        style = data.split("_")[1]
        session["style"] = style
        session["onboarding_stage"] = "awaiting_target_lang"
        await context.bot.send_message(chat_id=chat_id, text=f"Style - {style.capitalize()} ‚úÖ")

        # ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
        lang = session.get("interface_lang", "en")
        prompt = TARGET_LANG_PROMPT.get(lang, TARGET_LANG_PROMPT["en"])
        keyboard = get_target_language_keyboard(lang)
        await context.bot.send_message(chat_id=chat_id, text=prompt, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("target_"):
        target_lang = data.split("_")[1]
        session["target_lang"] = target_lang
        session["onboarding_stage"] = "completed"
        await context.bot.send_message(chat_id=chat_id, text=f"Target language - {target_lang.upper()} ‚úÖ")
        await send_localized_onboarding(chat_id, session, context)

    elif data.startswith("gender_"):
        gender = data.split("_")[1]
        session["gender"] = gender
        await context.bot.send_message(chat_id=chat_id, text=f"Gender - {gender.capitalize()} ‚úÖ")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ + –≤–æ–ø—Ä–æ—Å)
async def send_localized_onboarding(chat_id, session, context):
    lang = session.get("interface_lang", "en")
    onboarding_text = get_onboarding_message(lang)
    await context.bot.send_message(chat_id=chat_id, text=onboarding_text)

    # ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ —Å—Ç–∏–ª—è
    level = session.get("level", "A1")
    style = session.get("style", "casual")
    intro = get_intro_by_level_and_style(level, style, lang)
    await context.bot.send_message(chat_id=chat_id, text=intro)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ü–µ–ª–µ–≤–æ–º—É —è–∑—ã–∫—É + –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    target_lang = session.get("target_lang", "sv")  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    intro_message = {
        "ru": f"–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ {target_lang.upper()}!",
        "en": f"Let's try speaking in {target_lang.upper()}!"
    }.get(lang, f"Let's switch to {target_lang.upper()}!")

    await context.bot.send_message(chat_id=chat_id, text=intro_message)

    first_questions = {
        "sv": [
            "Hej! Hur m√•r du idag?",
            "Ska vi b√∂rja prata svenska?",
            "Vad tycker du om svenska spr√•ket?",
            "Redo att √∂va svenska? üòÑ",
            "Ber√§tta lite om dig sj√§lv p√• svenska!"
        ],
        "fi": [
            "Hei! Mit√§ kuuluu?",
            "Aloitetaanko suomeksi?",
            "Miten harjoittelet suomea?",
            "Puhutaanpa suomea!",
            "Kerro hieman itsest√§si suomeksi."
        ],
        "en": [
            "Hi! How are you today?",
            "Shall we start chatting in English?",
            "What do you think about practicing English?",
            "Are you ready for an English session? üòÑ",
            "Tell me a bit about yourself in English!"
        ],
        "es": [
            "¬°Hola! ¬øC√≥mo est√°s hoy?",
            "¬øEmpezamos a hablar en espa√±ol?",
            "¬øQu√© opinas del idioma espa√±ol?",
            "¬øListo para practicar espa√±ol? üòÑ",
            "¬°Cu√©ntame algo sobre ti en espa√±ol!"
        ],
        "de": [
            "Hallo! Wie geht es dir heute?",
            "Wollen wir auf Deutsch anfangen?",
            "Was denkst du √ºber die deutsche Sprache?",
            "Bereit, Deutsch zu √ºben? üòÑ",
            "Erz√§hl mir etwas √ºber dich auf Deutsch!"
        ],
        "fr": [
            "Salut ! Comment tu vas aujourd'hui ?",
            "On commence en fran√ßais ?",
            "Que penses-tu de la langue fran√ßaise ?",
            "Pr√™t √† pratiquer le fran√ßais ? üòÑ",
            "Parle-moi un peu de toi en fran√ßais !"
        ],
        "ru": [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?",
            "–ù–∞—á–Ω—ë–º –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏?",
            "–ö–∞–∫ —Ç–µ–±–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫?",
            "–ì–æ—Ç–æ–≤ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π? üòÑ",
            "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –ø–æ-—Ä—É—Å—Å–∫–∏!"
        ]
    }
    prompt = random.choice(first_questions.get(target_lang, ["Let's begin!"]))
    await context.bot.send_message(chat_id=chat_id, text=prompt)

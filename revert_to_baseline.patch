--- a/components/profile_db.py+++ b/components/profile_db.py@@ -7,47 +7,59 @@ # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î —Ä—è–¥–æ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
 DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'user_profiles.db'))
 
-# NEW: safe profile reset helper
-def clear_user_profile(chat_id: int) -> None:
-    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É –ª–∏–±–æ —Å–æ–∑–¥–∞–≤–∞—è –ø—É—Å—Ç—É—é)."""
-    conn = sqlite3.connect(DB_PATH)
-    cur = conn.cursor()
-    cur.execute("SELECT 1 FROM user_profiles WHERE chat_id = ?", (chat_id,))
-    exists = cur.fetchone() is not None
-    if exists:
-        cur.execute(
-            """
-            UPDATE user_profiles
-            SET name=NULL, interface_lang=NULL, target_lang=NULL, level=NULL, style=NULL,
-                promo_code_used=NULL, promo_type=NULL, promo_activated_at=NULL, promo_days=NULL
-            WHERE chat_id=?
-            """,
-            (chat_id,),
-        )
-    else:
-        cur.execute(
-            """
-            INSERT INTO user_profiles (chat_id)
-            VALUES (?)
-            """,
-            (chat_id,),
-        )
-    conn.commit()
-    conn.close()
-
 
 def init_db() -> None:
     """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
 
     –¢–∞–±–ª–∏—Ü–∞ user_profiles –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —É —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî
-    ...
+    –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ PRAGMA table_info + ALTER TABLE.
     """
-    # (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
-    ...
+    conn = sqlite3.connect(DB_PATH)
+    cur = conn.cursor()
+
+    # –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ (–∫–∞–∫ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
+    cur.execute(
+        """
+        CREATE TABLE IF NOT EXISTS user_profiles (
+            chat_id INTEGER PRIMARY KEY,
+            name TEXT,
+            interface_lang TEXT,
+            target_lang TEXT,
+            level TEXT,
+            style TEXT
+        )
+        """
+    )
+
+    # –ê–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
+    cur.execute("PRAGMA table_info(user_profiles)")
+    existing = {row[1] for row in cur.fetchall()}  # –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
+
+    required_cols = {
+        "promo_code_used": "TEXT",        # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (—Å—Ç—Ä–æ–∫–∞)
+        "promo_type": "TEXT",             # 'timed' | 'permanent' | 'english_only'
+        "promo_activated_at": "TEXT",     # ISO-8601 (UTC)
+        "promo_days": "INTEGER",          # —á–∏—Å–ª–æ –¥–Ω–µ–π –¥–ª—è timed
+    }
+    for col, coltype in required_cols.items():
+        if col not in existing:
+            cur.execute(f"ALTER TABLE user_profiles ADD COLUMN {col} {coltype}")
+
+    conn.commit()
+    conn.close()
+
+
+# === –£—Ç–∏–ª–∏—Ç—ã —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ñ–∏–ª—è ===
 
 def get_user_profile(chat_id: int) -> Optional[Dict[str, Any]]:
-    ...
-    # (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
+    conn = sqlite3.connect(DB_PATH)
+    conn.row_factory = sqlite3.Row
+    cur = conn.cursor()
+    cur.execute("SELECT * FROM user_profiles WHERE chat_id = ?", (chat_id,))
+    row = cur.fetchone()
+    conn.close()
+    return dict(row) if row else None
+
 
 def save_user_profile(
     chat_id: int,
@@ -65,10 +77,65 @@ ) -> None:
     """–û–±–Ω–æ–≤–ª—è–µ—Ç/—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Å—Ç–∏—á–Ω–æ (upsert)."""
     current = get_user_profile(chat_id) or {"chat_id": chat_id}
-    ...
-    # (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
+
+    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None)
+    updates = {
+        "name": name if name is not None else current.get("name"),
+        "interface_lang": interface_lang if interface_lang is not None else current.get("interface_lang"),
+        "target_lang": target_lang if target_lang is not None else current.get("target_lang"),
+        "level": level if level is not None else current.get("level"),
+        "style": style if style is not None else current.get("style"),
+        "promo_code_used": promo_code_used if promo_code_used is not None else current.get("promo_code_used"),
+        "promo_type": promo_type if promo_type is not None else current.get("promo_type"),
+        "promo_activated_at": promo_activated_at if promo_activated_at is not None else current.get("promo_activated_at"),
+        "promo_days": promo_days if promo_days is not None else current.get("promo_days"),
+    }
+
+    conn = sqlite3.connect(DB_PATH)
+    cur = conn.cursor()
+
+    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî UPDATE, –∏–Ω–∞—á–µ INSERT
+    cur.execute("SELECT 1 FROM user_profiles WHERE chat_id = ?", (chat_id,))
+    exists = cur.fetchone() is not None
+
+    if exists:
+        cur.execute(
+            """
+            UPDATE user_profiles SET
+              name = ?, interface_lang = ?, target_lang = ?, level = ?, style = ?,
+              promo_code_used = ?, promo_type = ?, promo_activated_at = ?, promo_days = ?
+            WHERE chat_id = ?
+            """,
+            (
+                updates["name"], updates["interface_lang"], updates["target_lang"],
+                updates["level"], updates["style"],
+                updates["promo_code_used"], updates["promo_type"],
+                updates["promo_activated_at"], updates["promo_days"], chat_id,
+            ),
+        )
+    else:
+        cur.execute(
+            """
+            INSERT INTO user_profiles (
+              chat_id, name, interface_lang, target_lang, level, style,
+              promo_code_used, promo_type, promo_activated_at, promo_days
+            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
+            """,
+            (
+                chat_id,
+                updates["name"], updates["interface_lang"], updates["target_lang"],
+                updates["level"], updates["style"],
+                updates["promo_code_used"], updates["promo_type"],
+                updates["promo_activated_at"], updates["promo_days"],
+            ),
+        )
+
+    conn.commit()
+    conn.close()
+
 
 # === –ù–æ–≤—ã–π —è–≤–Ω—ã–π —Å–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–º–æ ===
+
 def set_user_promo(
     chat_id: int,
     code: Optional[str],
@@ -86,8 +153,8 @@     if exists:
         cur.execute(
             """
-            UPDATE user_profiles
-            SET promo_code_used = ?, promo_type = ?, promo_activated_at = ?, promo_days = ?
+            UPDATE user_profiles SET
+              promo_code_used = ?, promo_type = ?, promo_activated_at = ?, promo_days = ?
             WHERE chat_id = ?
             """,
             (code, promo_type, activated_at, days, chat_id),

--- a/handlers/commands/reset.py+++ b/handlers/commands/reset.py@@ -2,17 +2,11 @@ from telegram.ext import ContextTypes
 from config.config import ADMINS
 from state.session import user_sessions
-from components.profile_db import clear_user_profile  # NEW: reset DB profile
 
 async def reset_command(update, context):
     chat_id = update.effective_chat.id
     if chat_id in ADMINS:
-        user_sessions[chat_id] = {}  # keep: reset in-memory session
-        try:
-            context.user_data.clear()  # NEW: clear user_data cache
-        except Exception:
-            pass
-        clear_user_profile(chat_id)   # NEW: clear DB profile
-        await update.message.reply_text("–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã.")
+        user_sessions[chat_id] = {}  # –°–±—Ä–æ—Å –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
+        await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
     else:
         await update.message.reply_text("‚õîÔ∏è")

--- a/handlers/settings.py+++ b/handlers/settings.py@@ -7,7 +7,6 @@ 
 from components.profile_db import get_user_profile, save_user_profile
 from components.promo import restrict_target_languages_if_needed, is_promo_valid
-# (–∏–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–∏; –ø—Ä–æ–º–æ-–æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –¥–µ–ª–∞–µ–º –≤ english_bot.py)
 
 logger = logging.getLogger(__name__)
 
@@ -22,176 +21,228 @@     ("üá´üáÆ Suomi", "fi"),
 ]
 
-# –£—Ä–æ–≤–Ω–∏
+# –£—Ä–æ–≤–Ω–∏ ‚Äî –±–µ–∑ —ç–º–æ–¥–∑–∏; —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–∞–∫ –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
 LEVELS_ROW1 = ["A0", "A1", "A2"]
 LEVELS_ROW2 = ["B1", "B2", "C1", "C2"]
 
-# –°—Ç–∏–ª–∏
+# –î–≤–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
 STYLES: List[Tuple[str, str]] = [
     ("üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "casual"),
     ("ü§ì –î–µ–ª–æ–≤–æ–π", "business"),
 ]
 
+
+# ---------- helpers ----------
+
 def _ui_lang(context: ContextTypes.DEFAULT_TYPE) -> str:
-    """–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)."""
-    try:
-        return (context.user_data or {}).get("ui", "ru")
-    except Exception:
-        return "ru"
+    return (context.user_data or {}).get("ui_lang", "ru")
+
 
 def _name_for_lang(code: str) -> str:
-    m = {"ru":"–†—É—Å—Å–∫–∏–π","en":"English","fr":"Fran√ßais","es":"Espa√±ol","de":"Deutsch","sv":"Svenska","fi":"Suomi"}
-    return m.get(code, code)
+    for title, c in LANGS:
+        if c == code:
+            return title
+    return code
+
 
 def _name_for_style(code: str) -> str:
-    return {"casual":"–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π","business":"–î–µ–ª–æ–≤–æ–π"}.get(code, code)
-
-def _main_menu_text(ui: str, language_name: str, level: str, style_name: str, english_only_note: bool) -> str:
-    if ui == "ru":
-        note = "\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø—Ä–æ–º–æ English-only)." if english_only_note else ""
-        return f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–Ø–∑—ã–∫: {language_name}\n–£—Ä–æ–≤–µ–Ω—å: {level}\n–°—Ç–∏–ª—å: {style_name}{note}"
-    else:
-        note = "\n\n‚ö†Ô∏è Only English available (English-only promo)." if english_only_note else ""
-        return f"‚öôÔ∏è Settings\nLanguage: {language_name}\nLevel: {level}\nStyle: {style_name}{note}"
-
-def _lang_keyboard(ui: str) -> InlineKeyboardMarkup:
-    btns = [[InlineKeyboardButton(title, callback_data=f"SET:LANG:{code}")]
-            for (title, code) in LANGS]
-    return InlineKeyboardMarkup(btns)
-
-def _level_keyboard(ui: str) -> InlineKeyboardMarkup:
-    btns = [
-        [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW1],
-        [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW2],
-    ]
-    return InlineKeyboardMarkup(btns)
-
-def _style_keyboard(ui: str) -> InlineKeyboardMarkup:
-    btns = [[InlineKeyboardButton(title, callback_data=f"SET:STYLE:{code}")]
-            for (title, code) in STYLES]
-    return InlineKeyboardMarkup(btns)
-
-def _menu_keyboard(ui: str, has_pending: bool = False) -> InlineKeyboardMarkup:  # NEW: has_pending flag
-    btns = [
-        [InlineKeyboardButton("üåê –Ø–∑—ã–∫ / Language" if ui == "ru" else "üåê Language / –Ø–∑—ã–∫", callback_data="SETTINGS:LANG")],
-        [InlineKeyboardButton("üéØ –£—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "üéØ Level", callback_data="SETTINGS:LEVEL")],
-        [InlineKeyboardButton("üé≠ –°—Ç–∏–ª—å" if ui == "ru" else "üé≠ Style", callback_data="SETTINGS:STYLE")],
-        [InlineKeyboardButton("üè∑Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥" if ui == "ru" else "üè∑Ô∏è Promo", callback_data="SETTINGS:PROMO")],
-    ]
-    # NEW: show confirm button only if there are unsaved changes
-    if has_pending:
-        btns.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ" if ui == "ru" else "‚úÖ Done", callback_data="SETTINGS:CONFIRM")])
-    return InlineKeyboardMarkup(btns)
-
-# –í—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–µ—Ä–µ–∑ /help –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª)
-async def settings_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
+    for title, c in STYLES:
+        if c == code:
+            return title
+    return code
+
+
+def _main_menu_text(ui: str, lang_name: str, level: str, style_name: str, english_only_note: bool) -> str:
+    base_ru = (
+        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–∞—Ç—Ç–∞\n\n"
+        f"‚Ä¢ –Ø–∑—ã–∫: {lang_name}\n"
+        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
+        f"‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {style_name}\n\n"
+        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?"
+    )
+    base_en = (
+        "‚öôÔ∏è Matt Settings\n\n"
+        f"‚Ä¢ Language: {lang_name}\n"
+        f"‚Ä¢ Level: {level}\n"
+        f"‚Ä¢ Chat style: {style_name}\n\n"
+        "What do you want to change?"
+    )
+    text = base_ru if ui == "ru" else base_en
+    if english_only_note:
+        text += ("\n\n‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π, –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"
+                 if ui == "ru" else
+                 "\n\n‚ùó Promo is permanent and limits learning to English only")
+    return text
+
+
+def _menu_keyboard(ui: str) -> InlineKeyboardMarkup:
+    return InlineKeyboardMarkup([
+        [
+            InlineKeyboardButton("üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫" if ui == "ru" else "üåê Change language",
+                                 callback_data="SETTINGS:LANG"),
+            InlineKeyboardButton("üìö –ü–æ–º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "üìö Change level",
+                                 callback_data="SETTINGS:LEVEL"),
+        ],
+        [
+            InlineKeyboardButton("üé® –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∏–ª—å" if ui == "ru" else "üé® Change style",
+                                 callback_data="SETTINGS:STYLE"),
+        ],
+    ])
+
+
+def _langs_keyboard(chat_id: int, ui: str) -> InlineKeyboardMarkup:
+    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º english_only
+    prof = get_user_profile(chat_id) or {}
+    lang_map = {code: title for title, code in LANGS}
+    lang_map = restrict_target_languages_if_needed(prof, lang_map)
+
+    # –°–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏
+    items = [(title, code) for code, title in lang_map.items()]
+    rows = []
+    for i in range(0, len(items), 2):
+        chunk = items[i:i+2]
+        rows.append([InlineKeyboardButton(t, callback_data=f"SET:LANG:{c}") for (t, c) in chunk])
+
+    rows.append([InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")])
+    return InlineKeyboardMarkup(rows)
+
+
+def _levels_keyboard(ui: str) -> InlineKeyboardMarkup:
+    row1 = [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW1]
+    row2 = [InlineKeyboardButton(x, callback_data=f"SET:LEVEL:{x}") for x in LEVELS_ROW2]
+    back = [InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")]
+    return InlineKeyboardMarkup([row1, row2, back])
+
+
+def _styles_keyboard(ui: str) -> InlineKeyboardMarkup:
+    rows = [[InlineKeyboardButton(title, callback_data=f"SET:STYLE:{code}")] for title, code in STYLES]
+    rows.append([InlineKeyboardButton("üëà –ù–∞–∑–∞–¥" if ui == "ru" else "üëà Back", callback_data="SETTINGS:BACK")])
+    return InlineKeyboardMarkup(rows)
+
+
+# ---------- public handlers ----------
+
+async def cmd_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
+    """–ö–æ–º–∞–Ω–¥–∞ /settings –∏–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ HELP:OPEN:SETTINGS ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
+
+    FIX: –∏—Å–ø–æ–ª—å–∑—É–µ–º context.bot.send_message –≤–º–µ—Å—Ç–æ update.message.reply_text,
+    —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ callback (update.message == None).
+    """
     ui = _ui_lang(context)
     chat_id = update.effective_chat.id
 
+    s = context.user_data or {}
     p = get_user_profile(chat_id) or {}
-    s = context.user_data or {}
-
-    language = p.get("target_lang") or s.get("language") or "en"   # NEW: DB ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
-    level = p.get("level") or s.get("level") or "B1"                # NEW
-    style = p.get("style") or s.get("style") or "neutral"           # NEW
+
+    language = p.get("target_lang") or s.get("language", "en")
+    level = p.get("level") or s.get("level", "B1")
+    style = p.get("style") or s.get("style", "casual")
     english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
-    has_pending = bool((context.user_data or {}).get("pending_changes"))  # NEW
-
-    await update.message.reply_text(
-        _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-        reply_markup=_menu_keyboard(ui, has_pending),  # NEW: pass has_pending
-    )
-
-# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
-async def settings_on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
+
+    text = _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note)
+    await context.bot.send_message(chat_id, text, reply_markup=_menu_keyboard(ui))
+
+
+async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
+    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å SETTINGS:/SET: (—Å–º. english_bot.py)."""
     q = update.callback_query
+    if not q or not q.data:
+        return
+
     data = q.data
     ui = _ui_lang(context)
-    chat_id = q.message.chat_id
-
-    # –Ø–ó–´–ö
+    chat_id = q.message.chat.id
+
+    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
+    if data == "SETTINGS:BACK":
+        p = get_user_profile(chat_id) or {}
+        s = context.user_data or {}
+        language = p.get("target_lang") or s.get("language", "en")
+        level = p.get("level") or s.get("level", "B1")
+        style = p.get("style") or s.get("style", "casual")
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui),
+        )
+        await q.answer()
+        return
+
+    if data == "SETTINGS:LANG":
+        await q.edit_message_text(
+            "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:" if ui == "ru" else "Choose a language:",
+            reply_markup=_langs_keyboard(chat_id, ui),
+        )
+        await q.answer()
+        return
+
+    if data == "SETTINGS:LEVEL":
+        # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –≥–∞–π–¥ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
+        guide = None
+        try:
+            from components.onboarding import get_level_guide  # type: ignore
+            guide = get_level_guide(ui)
+        except Exception:
+            guide = None
+        text = ("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å" if ui == "ru" else "Choose your level") + (f"\n\n{guide}" if guide else "")
+        await q.edit_message_text(text, reply_markup=_levels_keyboard(ui))
+        await q.answer()
+        return
+
+    if data == "SETTINGS:STYLE":
+        await q.edit_message_text(
+            "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:" if ui == "ru" else "Choose a chat style:",
+            reply_markup=_styles_keyboard(ui),
+        )
+        await q.answer()
+        return
+
+    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     if data.startswith("SET:LANG:"):
-        lang_code = data.split(":", 2)[-1]
-        pending = context.user_data.setdefault("pending_changes", {})  # NEW
-        pending["target_lang"] = lang_code  # NEW
-        await q.answer("–û–ö")  # NEW: defer save until CONFIRM
-
-        p = get_user_profile(chat_id) or {}
-        s = context.user_data or {}
-        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
-        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
-        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
-        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
-        await q.edit_message_text(
-            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
-        )
-        return
-
-    # –£–†–û–í–ï–ù–¨
+        code = data.split(":", 2)[-1]
+        context.user_data["language"] = code
+        save_user_profile(chat_id, target_lang=code)
+        await q.answer("–ì–æ—Ç–æ–≤–æ")
+        p = get_user_profile(chat_id) or {}
+        s = context.user_data or {}
+        language = p.get("target_lang") or s.get("language", "en")
+        level = p.get("level") or s.get("level", "B1")
+        style = p.get("style") or s.get("style", "casual")
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui),
+        )
+        return
+
     if data.startswith("SET:LEVEL:"):
         level = data.split(":", 2)[-1]
-        pending = context.user_data.setdefault("pending_changes", {})  # NEW
-        pending["level"] = level  # NEW
-        await q.answer("–û–ö")  # NEW: defer save until CONFIRM
-
-        p = get_user_profile(chat_id) or {}
-        s = context.user_data or {}
-        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
-        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
-        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
-        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
-        await q.edit_message_text(
-            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
-        )
-        return
-
-    # –°–¢–ò–õ–¨
+        context.user_data["level"] = level
+        save_user_profile(chat_id, level=level)
+        await q.answer("–ì–æ—Ç–æ–≤–æ")
+        p = get_user_profile(chat_id) or {}
+        s = context.user_data or {}
+        language = p.get("target_lang") or s.get("language", "en")
+        style = p.get("style") or s.get("style", "casual")
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui),
+        )
+        return
+
     if data.startswith("SET:STYLE:"):
         style = data.split(":", 2)[-1]
-        pending = context.user_data.setdefault("pending_changes", {})  # NEW
-        pending["style"] = style  # NEW
-        await q.answer("–û–ö")  # NEW: defer save until CONFIRM
-
-        p = get_user_profile(chat_id) or {}
-        s = context.user_data or {}
-        language = pending.get("target_lang") or p.get("target_lang") or s.get("language") or "en"  # NEW
-        level = pending.get("level") or p.get("level") or s.get("level") or "B1"                     # NEW
-        style = pending.get("style") or p.get("style") or s.get("style") or "neutral"                # NEW
-        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
-        await q.edit_message_text(
-            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui, has_pending=True),  # NEW
-        )
-        return
-
-    # ‚úÖ –ì–æ—Ç–æ–≤–æ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ pending –≤ –ë–î
-    if data == "SETTINGS:CONFIRM":  # NEW
-        pending = (context.user_data or {}).get("pending_changes") or {}  # NEW
-        if pending:  # NEW
-            save_user_profile(  # NEW
-                chat_id,        # NEW
-                target_lang=pending.get("target_lang"),  # NEW
-                level=pending.get("level"),              # NEW
-                style=pending.get("style"),              # NEW
-            )  # NEW
-            context.user_data["pending_changes"] = {}  # NEW
-        p = get_user_profile(chat_id) or {}  # NEW
-        language = p.get("target_lang") or "en"  # NEW
-        level = p.get("level") or "B1"           # NEW
-        style = p.get("style") or "neutral"      # NEW
-        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))  # NEW
-        await q.edit_message_text(  # NEW
-            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),  # NEW
-            reply_markup=_menu_keyboard(ui, has_pending=False),  # NEW
-        )  # NEW
-        await q.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ" if ui == "ru" else "Saved")  # NEW
-        return  # NEW
-
-    # –ü—Ä–æ–º–æ–∫–æ–¥ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
-    if data == "SETTINGS:PROMO":
-        await q.answer()
-        context.user_data["awaiting_promo"] = True  # NEW: expect text promo code
-        await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º:" if ui == "ru" else "Please type your promo code:")  # NEW
-        return
+        context.user_data["style"] = style
+        save_user_profile(chat_id, style=style)
+        await q.answer("–ì–æ—Ç–æ–≤–æ")
+        p = get_user_profile(chat_id) or {}
+        s = context.user_data or {}
+        language = p.get("target_lang") or s.get("language", "en")
+        level = p.get("level") or s.get("level", "B1")
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui),
+        )
+        return

--- a/english_bot.py+++ b/english_bot.py@@ -40,10 +40,6 @@ 
 # —Ä–µ–∂–∏–º—ã
 from components.mode import get_mode_keyboard, MODE_SWITCH_MESSAGES  # noqa: E401
-
-# NEW: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
-from components.profile_db import get_user_profile, set_user_promo  # NEW
-from components.promo import normalize_code, check_promo_code, activate_promo  # NEW
 
 # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
 try:
@@ -174,77 +170,10 @@         bot_app.add_handler(CommandHandler("session", session_command))
         bot_app.add_handler(CommandHandler("help", help_command))
 
-        # 2.5) –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ä–∞–Ω—å—à–µ –æ–±—â–µ–≥–æ)
-        async def _promo_text_handler(update: Update, context):  # NEW
-            if not getattr(update, "message", None):
-                return
-            # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —è–≤–Ω–æ –∂–¥—ë–º –ø—Ä–æ–º–æ–∫–æ–¥
-            if not context.user_data.get("awaiting_promo"):
-                return
-
-            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
-            context.user_data["awaiting_promo"] = False
-
-            code_raw = (update.message.text or "").strip()
-            if not code_raw:
-                return
-
-            code = normalize_code(code_raw)
-            chat_id = update.effective_chat.id
-            profile = (get_user_profile(chat_id) or {}) | {"chat_id": chat_id}
-
-            if not check_promo_code(code):
-                ui = (profile.get("interface_lang") or "ru")
-                await update.message.reply_text(
-                    "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üòï" if ui == "ru" else "Promo code not found üòï"
-                )
-                return
-
-            ok, reason = activate_promo(profile, code)
-            if not ok and reason == "already_used":
-                ui = (profile.get("interface_lang") or "ru")
-                await update.message.reply_text(
-                    "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ." if ui == "ru" else "Promo was already used."
-                )
-                return
-
-            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–æ –≤ –ë–î
-            set_user_promo(
-                chat_id=chat_id,
-                code=code,
-                promo_type=profile.get("promo_type"),
-                activated_at=profile.get("promo_activated_at"),
-                days=profile.get("promo_days"),
-            )
-
-            # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
-            ui = (profile.get("interface_lang") or "ru")
-            promo_type = profile.get("promo_type")
-            days = profile.get("promo_days")
-
-            if promo_type == "timed" and days:
-                msg = "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∫–ª—é—á—ë–Ω —Ç–∞—Ä–∏—Ñ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º." \
-                      if ui == "ru" else "Promo activated! Timed plan is on."
-            elif promo_type == "english_only":
-                msg = "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–µ—Å—Å—Ä–æ—á–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ." \
-                      if ui == "ru" else "Promo activated! Permanent, English only."
-            elif promo_type == "permanent":
-                msg = "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø." \
-                      if ui == "ru" else "Promo activated! Permanent access."
-            else:
-                msg = "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!" if ui == "ru" else "Promo activated!"
-
-            await update.message.reply_text(msg)
-
-        bot_app.add_handler(
-            MessageHandler(filters.TEXT & ~filters.COMMAND, _promo_text_handler),
-            group=-1,  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
-        )
-
         # 3) –û–±—â–∏–π CallbackQuery-—Ö–µ–Ω–¥–ª–µ—Ä ‚Äî –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü (fallback)
         bot_app.add_handler(CallbackQueryHandler(handle_callback_query), group=1)
 
-        # 4) –°–æ–æ–±—â–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥)
+        # 4) –°–æ–æ–±—â–µ–Ω–∏—è
         bot_app.add_handler(MessageHandler((filters.TEXT | filters.VOICE) & ~filters.COMMAND, handle_message))
 
         # 5) –ú—è–≥–∫–æ —É–±–∏—Ä–∞–µ–º –ª—é–±—É—é ReplyKeyboard –ø–æ—Å–ª–µ /start

--- a/fix_settings_promo.patch
+++ /dev/null
@@
-<file removed>

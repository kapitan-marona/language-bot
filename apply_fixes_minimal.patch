--- a/components/profile_db.py+++ b/components/profile_db.py@@ -6,6 +6,35 @@ 
 # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î —Ä—è–¥–æ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
 DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'user_profiles.db'))
+
+# NEW: safe profile reset helper
+def clear_user_profile(chat_id: int) -> None:
+    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É –ª–∏–±–æ —Å–æ–∑–¥–∞–≤–∞—è –ø—É—Å—Ç—É—é)."""
+    conn = sqlite3.connect(DB_PATH)
+    cur = conn.cursor()
+    cur.execute("SELECT 1 FROM user_profiles WHERE chat_id = ?", (chat_id,))
+    exists = cur.fetchone() is not None
+    if exists:
+        cur.execute(
+            """
+            UPDATE user_profiles
+            SET name=NULL, interface_lang=NULL, target_lang=NULL, level=NULL, style=NULL,
+                promo_code_used=NULL, promo_type=NULL, promo_activated_at=NULL, promo_days=NULL
+            WHERE chat_id=?
+            """,
+            (chat_id,),
+        )
+    else:
+        cur.execute(
+            """
+            INSERT INTO user_profiles (chat_id)
+            VALUES (?)
+            """,
+            (chat_id,),
+        )
+    conn.commit()
+    conn.close()
+
 
 
 def init_db() -> None:

--- a/handlers/commands/reset.py+++ b/handlers/commands/reset.py@@ -2,11 +2,17 @@ from telegram.ext import ContextTypes
 from config.config import ADMINS
 from state.session import user_sessions
+from components.profile_db import clear_user_profile  # NEW
 
 async def reset_command(update, context):
     chat_id = update.effective_chat.id
     if chat_id in ADMINS:
         user_sessions[chat_id] = {}  # –°–±—Ä–æ—Å –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
+        try:
+            context.user_data.clear()  # NEW
+        except Exception:
+            pass
+        clear_user_profile(chat_id)  # NEW
         await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
     else:
         await update.message.reply_text("‚õîÔ∏è")

--- a/handlers/settings.py+++ b/handlers/settings.py@@ -75,7 +75,7 @@     return text
 
 
-def _menu_keyboard(ui: str) -> InlineKeyboardMarkup:
+def _menu_keyboard(ui: str, has_pending: bool = False) -> InlineKeyboardMarkup:  # NEW
     return InlineKeyboardMarkup([
         [
             InlineKeyboardButton("üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫" if ui == "ru" else "üåê Change language",
@@ -163,7 +163,7 @@         english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
         await q.edit_message_text(
             _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui),
+        reply_markup=_menu_keyboard(ui, bool((context.user_data or {}).get("pending_changes"))),  # NEW
         )
         await q.answer()
         return
@@ -200,6 +200,7 @@     # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     if data.startswith("SET:LANG:"):
         code = data.split(":", 2)[-1]
+        pending = context.user_data.setdefault("pending_changes", {})  # NEW
         context.user_data["language"] = code
         save_user_profile(chat_id, target_lang=code)
         await q.answer("–ì–æ—Ç–æ–≤–æ")
@@ -211,12 +212,13 @@         english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
         await q.edit_message_text(
             _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui),
+        reply_markup=_menu_keyboard(ui, bool((context.user_data or {}).get("pending_changes"))),  # NEW
         )
         return
 
     if data.startswith("SET:LEVEL:"):
         level = data.split(":", 2)[-1]
+        pending = context.user_data.setdefault("pending_changes", {})  # NEW
         context.user_data["level"] = level
         save_user_profile(chat_id, level=level)
         await q.answer("–ì–æ—Ç–æ–≤–æ")
@@ -227,12 +229,13 @@         english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
         await q.edit_message_text(
             _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui),
+        reply_markup=_menu_keyboard(ui, bool((context.user_data or {}).get("pending_changes"))),  # NEW
         )
         return
 
     if data.startswith("SET:STYLE:"):
         style = data.split(":", 2)[-1]
+        pending = context.user_data.setdefault("pending_changes", {})  # NEW
         context.user_data["style"] = style
         save_user_profile(chat_id, style=style)
         await q.answer("–ì–æ—Ç–æ–≤–æ")
@@ -243,6 +246,27 @@         english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
         await q.edit_message_text(
             _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
-            reply_markup=_menu_keyboard(ui),
-        )
-        return
+        reply_markup=_menu_keyboard(ui, bool((context.user_data or {}).get("pending_changes"))),  # NEW
+        )
+        return
+
+    if data == "SETTINGS:CONFIRM":  # NEW
+        pending = (context.user_data or {}).get("pending_changes") or {}
+        if pending:
+            save_user_profile(chat_id,
+                target_lang=pending.get("target_lang"),
+                level=pending.get("level"),
+                style=pending.get("style"),
+            )
+            context.user_data["pending_changes"] = {}
+        p = get_user_profile(chat_id) or {}
+        language = p.get("target_lang") or "en"
+        level = p.get("level") or "B1"
+        style = p.get("style") or "neutral"
+        english_only_note = (p.get("promo_type") == "english_only" and is_promo_valid(p))
+        await q.edit_message_text(
+            _main_menu_text(ui, _name_for_lang(language), level, _name_for_style(style), english_only_note),
+            reply_markup=_menu_keyboard(ui, has_pending=False),
+        )
+        await q.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ" if ui == "ru" else "Saved")
+        return


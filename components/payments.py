# components/payments.py
from __future__ import annotations
from datetime import datetime, timedelta, timezone
from typing import Literal

from telegram import LabeledPrice, Update
from telegram.ext import ContextTypes

from components.profile_db import save_user_profile, get_user_profile
from components.i18n import get_ui_lang
from components.config_store import get_kv  # >>> ADDED

Product = Literal["pro_30d"]

XTR_CURRENCY = "XTR"  # Stars –≤–∞–ª—é—Ç–∞

def _price_stars() -> int:
    """
    –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö. –ï—Å–ª–∏ –≤ config_store –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç 1000.
    """
    try:
        val = int(get_kv("price_stars", 1000))  # >>> ADDED
        return max(1, val)
    except Exception:
        return 1000

def plan_price_xtr(product: Product) -> list[LabeledPrice]:
    if product == "pro_30d":
        return [LabeledPrice(label="30 days", amount=_price_stars())]  # >>> CHANGED
    raise ValueError("Unknown product")

def compute_expiry(profile: dict | None, days: int = 30) -> datetime:
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç/–∏—Å—Ç–µ–∫–ª–∞,
    –ª–∏–±–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ expiry, –µ—Å–ª–∏ –æ–Ω –≤ –±—É–¥—É—â–µ–º.
    """
    now = datetime.now(timezone.utc)
    base = now
    if profile:
        expires_iso = profile.get("premium_until")  # >>> CHANGED (–ø–æ–ª–µ –ë–î)
        if expires_iso:
            try:
                dt = datetime.fromisoformat(str(expires_iso).replace("Z", "+00:00"))
                if dt.tzinfo is None:
                    dt = dt.replace(tzinfo=timezone.utc)
                base = dt if dt > now else now
            except Exception:
                pass
    return base + timedelta(days=days)

# ------------------- PRO (–ø–æ–∫—É–ø–∫–∞) -------------------

async def send_stars_invoice(update: Update, ctx: ContextTypes.DEFAULT_TYPE, product: Product) -> None:
    ui = get_ui_lang(update, ctx)
    title = "English Talking ‚Äî 30 –¥–Ω–µ–π" if ui == "ru" else "English Talking ‚Äî 30 days"
    desc = ("–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≥–æ–ª–æ—Å–µ –Ω–∞ 30 –¥–Ω–µ–π."
            if ui == "ru"
            else "Unlimited text & voice chats for 30 days.")
    payload = f"{product}:{update.effective_user.id}"

    await update.effective_chat.send_invoice(
        title=title,
        description=desc,
        payload=payload,
        provider_token="",          # Stars
        currency=XTR_CURRENCY,
        prices=plan_price_xtr(product),
    )

# ------------------- DONATION (–¥–æ–Ω–∞—Ç—ã) -------------------

async def send_donation_invoice(update: Update, ctx: ContextTypes.DEFAULT_TYPE, amount: int) -> None:
    ui = get_ui_lang(update, ctx)
    title = "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É" if ui == "ru" else "Donation to the Project"
    desc = ("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –∑–≤—ë–∑–¥–∞—Ö."
            if ui == "ru" else
            "Thank you for your support! This is a voluntary donation in Stars.")
    payload = f"donation:{amount}:{update.effective_user.id}"
    prices = [LabeledPrice(label="Donation", amount=int(amount))]

    await update.effective_chat.send_invoice(
        title=title,
        description=desc,
        payload=payload,
        provider_token="",   # Stars
        currency=XTR_CURRENCY,
        prices=prices,
    )

# ------------------- –û–±—â–∏–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã -------------------

async def precheckout_ok(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.pre_checkout_query.answer(ok=True)

async def on_successful_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    sp = getattr(update.message, "successful_payment", None)
    if not sp:
        return

    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ ¬´–∂–¥—É —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞¬ª, —á—Ç–æ–±—ã —á–∞—Ç –Ω–µ –≤–º–µ—à–∏–≤–∞–ª—Å—è
    try:
        if getattr(ctx, "user_data", None) and ctx.user_data.get("donate_wait_amount"):  # >>> ADDED
            ctx.user_data.pop("donate_wait_amount", None)                                 # >>> ADDED
    except Exception:
        pass

    payload = sp.invoice_payload or ""

    # --- –î–æ–Ω–∞—Ç: –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º ---
    if payload.startswith("donation:"):
        try:
            _, amount_str, _ = payload.split(":", 2)
            amount = int(amount_str)
        except Exception:
            amount = sp.total_amount or 0
        ui = get_ui_lang(update, ctx)
        msg = (f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ü–æ–ª—É—á–µ–Ω–æ {amount}‚≠ê"
               if ui == "ru" else
               f"üôè Thank you for your support! Received {amount}‚≠ê")
        await update.message.reply_text(msg)
        return

    # --- –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ (30 –¥–Ω–µ–π) ---
    if not payload.startswith("pro_30d:"):
        return

    # —á–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        _, uid_str = payload.split(":", 1)
        if int(uid_str) != update.effective_user.id:
            return
    except Exception:
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É
    expected = _price_stars()  # >>> CHANGED
    if sp.currency != XTR_CURRENCY or int(sp.total_amount) != int(expected):  # >>> CHANGED
        return

    profile = get_user_profile(update.effective_user.id) or {}
    until = compute_expiry(profile, days=30)

    save_user_profile(
        update.effective_user.id,
        premium_activated_at=datetime.now(timezone.utc).isoformat(),  # >>> CHANGED
        premium_until=until.isoformat(),                               # >>> CHANGED
        premium_source="stars",                                        # >>> ADDED
    )

    ui = get_ui_lang(update, ctx)
    msg = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {until.date().isoformat()}. –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!"
        if ui == "ru"
        else f"‚úÖ Payment complete! Access active until {until.date().isoformat()}. Enjoy!"
    )
    await update.message.reply_text(msg)

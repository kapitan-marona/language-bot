from __future__ import annotations
from datetime import datetime, timedelta, timezone
from typing import Literal
from telegram import LabeledPrice, Update
from telegram.ext import ContextTypes
from components.profile_db import save_user_profile, get_user_profile
from components.i18n import get_ui_lang  # NEW

# NEW: –∏–º–ø–æ—Ä—Ç —Ö–µ–ª–ø–µ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
from handlers.chat.chat_handler import maybe_send_sticker

Product = Literal["pro_30d"]

XTR_CURRENCY = "XTR"  # Stars –≤–∞–ª—é—Ç–∞

def plan_price_xtr(product: Product) -> list[LabeledPrice]:
    if product == "pro_30d":
        return [LabeledPrice(label="30 days", amount=1000)]
    raise ValueError("Unknown product")

def compute_expiry(profile: dict | None, days: int = 30) -> datetime:
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞,
    –ª–∏–±–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ expiry, –µ—Å–ª–∏ –æ–Ω –≤ –±—É–¥—É—â–µ–º.
    """
    now = datetime.now(timezone.utc)
    base = now
    if profile:
        expires = profile.get("premium_expires_at")
        if expires:
            try:
                dt = datetime.fromisoformat(expires)
                if dt.tzinfo is None:                # NEW: –ø—Ä–∏–≤–æ–¥–∏–º –∫ TZ-aware, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ç–∞–π–º–∑–æ–Ω—ã
                    dt = dt.replace(tzinfo=timezone.utc)
                base = dt if dt > now else now       # NEW: –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
            except Exception:
                pass
    return base + timedelta(days=days)

# ------------------- PRO (–ø–æ–∫—É–ø–∫–∞) -------------------

async def send_stars_invoice(update: Update, ctx: ContextTypes.DEFAULT_TYPE, product: Product) -> None:
    # NEW: –ª–æ–∫–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É UI-—è–∑—ã–∫—É
    ui = get_ui_lang(update, ctx)                    # NEW
    title = "English Talking ‚Äî 30 –¥–Ω–µ–π" if ui == "ru" else "English Talking ‚Äî 30 days"  # CHANGED
    desc = ("–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≥–æ–ª–æ—Å–µ –Ω–∞ 30 –¥–Ω–µ–π."
            if ui == "ru"
            else "Unlimited text & voice chats for 30 days.")                           # CHANGED
    payload = f"{product}:{update.effective_user.id}"

    await update.effective_chat.send_invoice(
        title=title,
        description=desc,
        payload=payload,
        provider_token="",       # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Stars ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        currency=XTR_CURRENCY,
        prices=plan_price_xtr(product),
        # start_parameter="premium_30d",            # NEW (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å deep-linking
    )

# ------------------- DONATION (–¥–æ–Ω–∞—Ç—ã) -------------------

async def send_donation_invoice(update: Update, ctx: ContextTypes.DEFAULT_TYPE, amount: int) -> None:
    """
    –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É –∑–≤—ë–∑–¥–æ—á–µ–∫.
    payload = "donation:<amount>:<user_id>" ‚Äî —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –ø–æ–∫—É–ø–∫–∏.
    """
    ui = get_ui_lang(update, ctx)
    title = "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É" if ui == "ru" else "Donation to the Project"
    desc = ("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –∑–≤—ë–∑–¥–∞—Ö."
            if ui == "ru" else
            "Thank you for your support! This is a voluntary donation in Stars.")
    payload = f"donation:{amount}:{update.effective_user.id}"
    prices = [LabeledPrice(label="Donation", amount=amount)]

    await update.effective_chat.send_invoice(
        title=title,
        description=desc,
        payload=payload,
        provider_token="",   # Stars
        currency=XTR_CURRENCY,
        prices=prices,
    )

# ------------------- –û–±—â–∏–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã -------------------

async def precheckout_ok(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.pre_checkout_query.answer(ok=True)

async def on_successful_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    sp = update.message.successful_payment
    if not sp:  # –∑–∞—â–∏—Ç–∞
        return

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —Ç–∞–∫–æ–π charge —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    profile = get_user_profile(update.effective_user.id)
    if profile and profile.get("last_payment_charge_id") == sp.telegram_payment_charge_id:
        return

    payload = sp.invoice_payload or ""

    # --- –î–æ–Ω–∞—Ç: –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ ---
    if payload.startswith("donation:"):
        try:
            # payload: "donation:<amount>:<user_id>"
            _, amount_str, _ = payload.split(":", 2)
            amount = int(amount_str)
        except Exception:
            amount = 0
        ui = get_ui_lang(update, ctx)
        msg = (f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ü–æ–ª—É—á–µ–Ω–æ {amount}‚≠ê"
               if ui == "ru" else
               f"üôè Thank you for your support! Received {amount}‚≠ê")
        await update.message.reply_text(msg)
        return

    # --- –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ (–∫–∞–∫ –±—ã–ª–æ), —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
    if not payload.startswith("pro_30d:"):
        return  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload

    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —á–µ–∫ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω —ç—Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        _, uid_str = payload.split(":", 1)
        if int(uid_str) != update.effective_user.id:
            return
    except Exception:
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã –∏ —Å—É–º–º—ã
    if sp.currency != XTR_CURRENCY or sp.total_amount != 1000:
        return

    until = compute_expiry(profile, days=30)
    save_user_profile(
        update.effective_user.id,
        is_premium=1,
        premium_expires_at=until.isoformat(),
        last_payment_charge_id=sp.telegram_payment_charge_id,  # –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    )
    ui = get_ui_lang(update, ctx)
    msg = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {until.date().isoformat()}. –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!"
        if ui == "ru"
        else f"‚úÖ Payment complete! Access active until {until.date().isoformat()}. Enjoy!"
    )
    await update.message.reply_text(msg)
    # NEW: ¬´–∏–Ω–æ–≥–¥–∞¬ª ‚Äî 0.7 –ø–æ –¢–ó
    await maybe_send_sticker(ctx, update.effective_chat.id, "fire", chance=0.7)

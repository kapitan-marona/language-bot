from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from state.session import user_sessions
from components.promo import activate_promo
from components.promo_texts import PROMO_ASK, PROMO_SUCCESS, PROMO_FAIL, PROMO_ALREADY_USED
from handlers.chat.prompt_templates import INTERFACE_LANG_PROMPT, TARGET_LANG_PROMPT
from components.language import get_target_language_keyboard, LANGUAGES
from components.levels import get_level_keyboard, LEVEL_PROMPT
from components.style import get_style_keyboard, STYLE_LABEL_PROMPT
from handlers.chat.levels_text import get_level_guide, LEVEL_GUIDE_BUTTON, LEVEL_GUIDE_CLOSE_BUTTON
from handlers.chat.prompt_templates import START_MESSAGE, MATT_INTRO, INTRO_QUESTIONS

import random

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
STYLE_SELECTED_MSG = {
    "ru": "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üå∑",
    "en": "Great choice üå∑"
}

def get_interface_language_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="interface_lang:ru"),
            InlineKeyboardButton("English", callback_data="interface_lang:en"),
        ]
    ])

def get_ok_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÜó OK", callback_data="onboarding_ok")]
    ])

def get_level_guide_keyboard(lang):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(LEVEL_GUIDE_CLOSE_BUTTON.get(lang, LEVEL_GUIDE_CLOSE_BUTTON["en"]), callback_data="close_level_guide")]
    ])

# --- –®–ê–ì 1. /start ‚Äî –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
async def send_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})
    session["onboarding_stage"] = "awaiting_language"

    # –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä—É—Å—Å–∫–∏–π
    lang = 'ru'
    await context.bot.send_message(
        chat_id=chat_id,
        text=INTERFACE_LANG_PROMPT.get(lang, INTERFACE_LANG_PROMPT['en']),
        reply_markup=get_interface_language_keyboard()
    )

# --- –®–ê–ì 2. –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ ---
async def interface_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["interface_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_promo"
    await query.edit_message_text(
        text=PROMO_ASK.get(lang_code, PROMO_ASK["en"]),
        reply_markup=ReplyKeyboardRemove()
    )

# --- –®–ê–ì 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ—Ç–∫–∞–∑) ---
async def promo_code_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})
    lang_code = session.get("interface_lang", "en")
    promo_code = (update.message.text or "").strip()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    if promo_code.lower() in ["–Ω–µ—Ç", "no"]:
        session["promo_code_used"] = None
        session["promo_type"] = None
        await context.bot.send_message(
            chat_id=chat_id,
            text=START_MESSAGE.get(lang_code, START_MESSAGE["en"]),
            reply_markup=get_ok_keyboard()
        )
        session["onboarding_stage"] = "awaiting_ok"
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, reason = activate_promo(session, promo_code)
    if success:
        await context.bot.send_message(
            chat_id=chat_id,
            text=PROMO_SUCCESS.get(lang_code, PROMO_SUCCESS["en"]),
            reply_markup=get_ok_keyboard()
        )
        session["onboarding_stage"] = "awaiting_ok"
    else:
        if reason == "invalid":
            await context.bot.send_message(
                chat_id=chat_id,
                text=PROMO_FAIL.get(lang_code, PROMO_FAIL["en"]),
            )
        elif reason == "already_used":
            await context.bot.send_message(
                chat_id=chat_id,
                text=PROMO_ALREADY_USED.get(lang_code, PROMO_ALREADY_USED["en"]),
            )
        # –û—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚Äî –∂–¥—ë–º –Ω–æ–≤—ã–π –≤–≤–æ–¥ –∏–ª–∏ "–Ω–µ—Ç"
        session["onboarding_stage"] = "awaiting_promo"

# --- –®–ê–ì 4. OK ‚Äî –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ---
async def onboarding_ok_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    lang_code = session.get("interface_lang", "ru")
    session["onboarding_stage"] = "awaiting_target_lang"
    await query.edit_message_text(
        text=TARGET_LANG_PROMPT.get(lang_code, TARGET_LANG_PROMPT["en"]),
        reply_markup=get_target_language_keyboard(session)  # –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ EN)
    )

# --- –®–ê–ì 5. –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ‚Äî –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ---
async def target_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["target_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_level"
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=LEVEL_PROMPT.get(interface_lang, LEVEL_PROMPT["en"]),
        reply_markup=get_level_keyboard(interface_lang)
    )

# --- –ì–∞–π–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
async def level_guide_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=get_level_guide(interface_lang),
        parse_mode="Markdown",
        reply_markup=get_level_guide_keyboard(interface_lang)
    )

# --- –ó–∞–∫—Ä—ã—Ç—å –≥–∞–π–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
async def close_level_guide_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=LEVEL_PROMPT.get(interface_lang, LEVEL_PROMPT["en"]),
        reply_markup=get_level_keyboard(interface_lang)
    )

# --- –®–ê–ì 6. –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ‚Äî —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ---
async def level_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["level"] = level
    session["onboarding_stage"] = "awaiting_style"
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=STYLE_LABEL_PROMPT.get(interface_lang, STYLE_LABEL_PROMPT["en"]),
        reply_markup=get_style_keyboard(interface_lang)
    )

# --- –®–ê–ì 7. –í—ã–±–æ—Ä —Å—Ç–∏–ª—è ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å ---
async def style_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style = query.data.split(":")[1]
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["style"] = style
    session["onboarding_stage"] = "complete"
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=STYLE_SELECTED_MSG.get(interface_lang, STYLE_SELECTED_MSG["en"])
    )
    await onboarding_final(update, context)

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ú—ç—Ç—Ç–∞ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ---
async def onboarding_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id if hasattr(update, "effective_chat") else update.callback_query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "en")
    target_lang = session.get("target_lang", interface_lang)
    await context.bot.send_message(
        chat_id=chat_id,
        text=MATT_INTRO.get(interface_lang, MATT_INTRO["en"])
    )
    question = random.choice(INTRO_QUESTIONS.get(target_lang, INTRO_QUESTIONS["en"]))
    await context.bot.send_message(chat_id=chat_id, text=question)

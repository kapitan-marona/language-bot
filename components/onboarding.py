# components/onboarding.py
from __future__ import annotations
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from state.session import user_sessions
from components.promo import activate_promo
from components.profile_db import get_user_profile  # —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
from components.safety import safe_save_user_profile  # <-- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–ê–ü–¢–ï–†
from utils.decorators import safe_handler
from components.promo_texts import PROMO_ASK, PROMO_SUCCESS, PROMO_FAIL, PROMO_ALREADY_USED
from handlers.chat.prompt_templates import INTERFACE_LANG_PROMPT, TARGET_LANG_PROMPT
from components.language import get_target_language_keyboard, LANGUAGES
from components.levels import get_level_keyboard, LEVEL_PROMPT
from components.style import get_style_keyboard, STYLE_LABEL_PROMPT
from handlers.chat.levels_text import get_level_guide, LEVEL_GUIDE_BUTTON, LEVEL_GUIDE_CLOSE_BUTTON
from handlers.chat.prompt_templates import START_MESSAGE, MATT_INTRO, INTRO_QUESTIONS, INTRO_QUESTIONS_EASY

import random
import logging
import re

logger = logging.getLogger(__name__)

# --- –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã/–ø–∞—Ä—Å–µ—Ä—ã ---
_LANG_CODE_RE = re.compile(r"^(en|ru|fr|es|de|sv|fi)$")

def _parse_callback_value(data: str, expected_prefix: str) -> str | None:
    if not data or ":" not in data:
        return None
    prefix, value = data.split(":", 1)
    if prefix != expected_prefix:
        return None
    value = (value or "").strip()
    return value or None

def _is_lang_code(value: str) -> bool:
    return bool(value and _LANG_CODE_RE.match(value))

STYLE_SELECTED_MSG = {
    "ru": "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üå∑",
    "en": "Great choice üå∑"
}

def get_interface_language_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="interface_lang:ru"),
            InlineKeyboardButton("English", callback_data="interface_lang:en"),
        ]
    ])

def get_ok_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üÜó OK", callback_data="onboarding_ok")]])

def get_level_guide_keyboard(lang):
    return InlineKeyboardMarkup([[InlineKeyboardButton(LEVEL_GUIDE_CLOSE_BUTTON.get(lang, LEVEL_GUIDE_CLOSE_BUTTON["en"]), callback_data="close_level_guide")]])

# --- –®–ê–ì 1. /start ‚Äî –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
@safe_handler
async def send_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})
    session["onboarding_stage"] = "awaiting_language"

    # –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ ‚Äî —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–∞–∫ –±—ã–ª–æ)
    lang = "ru"
    await context.bot.send_message(
        chat_id=chat_id,
        text=INTERFACE_LANG_PROMPT.get(lang, INTERFACE_LANG_PROMPT["en"]),
        reply_markup=get_interface_language_keyboard(),
    )

# --- –®–ê–ì 2. –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ ---
@safe_handler
async def interface_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    raw = query.data
    lang_code = _parse_callback_value(raw, "interface_lang")
    if not _is_lang_code(lang_code or ""):
        logger.warning("Invalid interface_lang callback_data=%r, fallback to 'en'", raw)
        lang_code = "en"

    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["interface_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_promo"

    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    try:
        safe_save_user_profile(chat_id, interface_lang=lang_code)
    except Exception:
        logger.exception("Failed to save interface_lang=%s for chat_id=%s", lang_code, chat_id)

    await query.edit_message_text(text=PROMO_ASK.get(lang_code, PROMO_ASK["en"]))

# --- –®–ê–ì 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∏–ª–∏ –æ—Ç–∫–∞–∑) ---
@safe_handler
async def promo_code_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    session = user_sessions.setdefault(chat_id, {})
    lang_code = session.get("interface_lang", "en")
    promo_code = (update.message.text or "").strip()

    # –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promo_code.lower() in ["–Ω–µ—Ç", "no"]:
        session["promo_code_used"] = None
        session["promo_type"] = None
        await context.bot.send_message(
            chat_id=chat_id,
            text=START_MESSAGE.get(lang_code, START_MESSAGE["en"]),
            reply_markup=get_ok_keyboard(),
        )
        session["onboarding_stage"] = "awaiting_ok"
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ –≤ session (–æ–Ω –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ)
    success, reason = activate_promo(session, promo_code)
    if success:
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ß–ï–†–ï–ó –ê–î–ê–ü–¢–ï–†
        profile = get_user_profile(chat_id) or {"chat_id": chat_id}

        profile["promo_code_used"] = session.get("promo_code_used")
        profile["promo_type"] = session.get("promo_type")
        profile["promo_activated_at"] = session.get("promo_activated_at")
        profile["promo_days"] = session.get("promo_days")
        # –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è ‚Äî –ø–µ—Ä–µ–¥–∞–¥–∏–º, –∞–¥–∞–ø—Ç–µ—Ä –æ—Ç–±—Ä–æ—Å–∏—Ç, –µ—Å–ª–∏ —Å—Ö–µ–º–∞ —Å—Ç–∞—Ä–∞—è:
        extra_minutes = session.get("promo_minutes")
        used_codes = session.get("promo_used_codes")

        safe_save_user_profile(
            chat_id,
            promo_code_used=profile.get("promo_code_used"),
            promo_type=profile.get("promo_type"),
            promo_activated_at=profile.get("promo_activated_at"),
            promo_days=profile.get("promo_days"),
            promo_minutes=extra_minutes,           # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –∞–¥–∞–ø—Ç–µ—Ä –æ—Ç–±—Ä–æ—Å–∏—Ç
            promo_used_codes=used_codes,           # —Å–ø–∏—Å–æ–∫ ‚Äî –∞–¥–∞–ø—Ç–µ—Ä –æ—Ç–±—Ä–æ—Å–∏—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        )

        await context.bot.send_message(
            chat_id=chat_id,
            text=PROMO_SUCCESS.get(lang_code, PROMO_SUCCESS["en"]),
            reply_markup=get_ok_keyboard(),
        )
        session["onboarding_stage"] = "awaiting_ok"
    else:
        if reason == "invalid":
            await context.bot.send_message(chat_id=chat_id, text=PROMO_FAIL.get(lang_code, PROMO_FAIL["en"]))
        elif reason == "already_used":
            await context.bot.send_message(chat_id=chat_id, text=PROMO_ALREADY_USED.get(lang_code, PROMO_ALREADY_USED["en"]))
        # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        session["onboarding_stage"] = "awaiting_promo"

# --- –®–ê–ì 4. OK ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ---
@safe_handler
async def onboarding_ok_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    lang_code = session.get("interface_lang", "ru")
    session["onboarding_stage"] = "awaiting_target_lang"
    await query.edit_message_text(
        text=TARGET_LANG_PROMPT.get(lang_code, TARGET_LANG_PROMPT["en"]),
        reply_markup=get_target_language_keyboard(session),
    )

# --- –®–ê–ì 5. –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ‚Äî –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ---
@safe_handler
async def target_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    raw = query.data
    lang_code = _parse_callback_value(raw, "target_lang")
    if not _is_lang_code(lang_code or ""):
        logger.warning("Invalid target_lang callback_data=%r, fallback to 'en'", raw)
        lang_code = "en"

    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["target_lang"] = lang_code
    session["onboarding_stage"] = "awaiting_level"

    try:
        safe_save_user_profile(chat_id, target_lang=lang_code)
    except Exception:
        logger.exception("Failed to save target_lang=%s for chat_id=%s", lang_code, chat_id)

    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=LEVEL_PROMPT.get(interface_lang, LEVEL_PROMPT["en"]),
        reply_markup=get_level_keyboard(interface_lang),
    )

# --- –ì–∞–π–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
@safe_handler
async def level_guide_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=get_level_guide(interface_lang),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(LEVEL_GUIDE_CLOSE_BUTTON.get(interface_lang, LEVEL_GUIDE_CLOSE_BUTTON["en"]), callback_data="close_level_guide")]]),
    )

# --- –ó–∞–∫—Ä—ã—Ç—å –≥–∞–π–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
@safe_handler
async def close_level_guide_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=LEVEL_PROMPT.get(interface_lang, LEVEL_PROMPT["en"]),
        reply_markup=get_level_keyboard(interface_lang),
    )

# --- –®–ê–ì 6. –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ‚Äî —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ---
@safe_handler
async def level_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    raw = query.data
    level = _parse_callback_value(raw, "level")
    if not level:
        logger.warning("Invalid level callback_data=%r, fallback to 'A2'", raw)
        level = "A2"

    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["level"] = level
    session["onboarding_stage"] = "awaiting_style"

    try:
        safe_save_user_profile(chat_id, level=level)
    except Exception:
        logger.exception("Failed to save level=%s for chat_id=%s", level, chat_id)

    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(
        text=STYLE_LABEL_PROMPT.get(interface_lang, STYLE_LABEL_PROMPT["en"]),
        reply_markup=get_style_keyboard(interface_lang),
    )

# --- –®–ê–ì 7. –°—Ç–∏–ª—å ‚Äî —Ñ–∏–Ω–∞–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ---
@safe_handler
async def style_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    raw = query.data
    style = _parse_callback_value(raw, "style")
    if not style:
        logger.warning("Invalid style callback_data=%r, fallback to 'casual'", raw)
        style = "casual"

    chat_id = query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})
    session["style"] = style
    session["onboarding_stage"] = "complete"

    try:
        safe_save_user_profile(chat_id, style=style)
    except Exception:
        logger.exception("Failed to save style=%s for chat_id=%s", style, chat_id)

    interface_lang = session.get("interface_lang", "ru")
    await query.edit_message_text(text={"ru": "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üå∑", "en": "Great choice üå∑"}.get(interface_lang, "Great choice üå∑"))
    await onboarding_final(update, context)

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ú—ç—Ç—Ç–∞ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ---
@safe_handler
async def onboarding_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    chat_id = update.effective_chat.id if hasattr(update, "effective_chat") else update.callback_query.message.chat_id
    session = user_sessions.setdefault(chat_id, {})

    interface_lang = session.get("interface_lang", "en")
    level = session.get("level", "A2")
    target_lang = session.get("target_lang", session.get("interface_lang", "en"))

    # –í–æ–ø—Ä–æ—Å—ã ‚Äî –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Ä–æ–≤–Ω—è
    if level in ("A0", "A1", "A2"):
        pool = INTRO_QUESTIONS_EASY.get(target_lang, INTRO_QUESTIONS_EASY.get("en", ["Hi! How are you today?"]))
    else:
        pool = INTRO_QUESTIONS.get(target_lang, INTRO_QUESTIONS.get("en", ["What‚Äôs up?"]))
    question = random.choice(pool)

    # 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –≤–æ–ø—Ä–æ—Å
    intro_text = MATT_INTRO.get(interface_lang, MATT_INTRO["en"])
    await context.bot.send_message(chat_id=chat_id, text=intro_text)
    await context.bot.send_message(chat_id=chat_id, text=question)

    # 2) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–µ —Ä–µ–ø–ª–∏–∫–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history = session.setdefault("history", [])
    history.append({"role": "assistant", "content": intro_text})
    history.append({"role": "assistant", "content": question})

    session["onboarding_stage"] = "complete"

# components/rate_limit.py
import asyncio
import time
from functools import wraps

from telegram.ext import ContextTypes

def async_rate_limit(seconds: float):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è PTB v20+ (async handlers).
    –•—Ä–∞–Ω–∏—Ç —Ç–∞–π–º—Å—Ç–µ–º–ø –≤ context.chat_data["__last_ts"].
    –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            chat_data = context.chat_data
            now = time.time()
            last_ts = chat_data.get("__last_ts", 0.0)
            if (now - last_ts) < seconds:
                # –º—è–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                try:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚è≥ –ü–æ–≥–æ–¥–∏, –¥—É–º–∞—é üôÇ")
                finally:
                    return
            chat_data["__last_ts"] = now
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

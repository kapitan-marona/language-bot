from __future__ import annotations
import os
import re
import tempfile
import subprocess
import shutil
import logging
from typing import Tuple
from openai import OpenAI
from config.config import OPENAI_API_KEY

logger = logging.getLogger(__name__)

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

_LEVEL_SET = {"A0", "A1", "A2", "B1", "B2", "C1", "C2"}

# -------------------- —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è TTS --------------------

# –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏/–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã TTS –∏—Ö –Ω–µ ¬´–ø—Ä–æ–∏–∑–Ω–æ—Å–∏–ª¬ª
_EMOJI_RE = re.compile(
    "[\U0001F1E6-\U0001F1FF"  # —Ñ–ª–∞–≥–∏
    "\U0001F300-\U0001F5FF"   # —Å–∏–º–≤–æ–ª—ã/–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
    "\U0001F600-\U0001F64F"   # —Å–º–∞–π–ª—ã
    "\U0001F680-\U0001F6FF"   # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç/—Å–∏–º–≤–æ–ª—ã
    "\U0001F700-\U0001F77F"
    "\U0001F780-\U0001F7FF"
    "\U0001F800-\U0001F8FF"
    "\U0001F900-\U0001F9FF"
    "\U0001FA00-\U0001FA6F"
    "\U0001FA70-\U0001FAFF"
    "\u2600-\u26FF"           # —Ä–∞–∑–Ω–æ–µ
    "\u2700-\u27BF"           # Dingbats
    "]+",
    flags=re.UNICODE
)

# –•–≤–æ—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö (–æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) ‚Äî –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–µ–º
_PARENS_TAIL_RE = re.compile(r"\s*\([^()]*\)\s*$")

def _strip_emojis(text: str) -> str:
    return _EMOJI_RE.sub("", text or "")

def _strip_parenthesized_tail(text: str) -> str:
    return _PARENS_TAIL_RE.sub("", text or "").strip()

def _slowdown_by_level(text: str, level: str) -> str:
    """
    –ó–∞–º–µ–¥–ª—è–µ–º —Ä–µ—á—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π –º—è–≥–∫–∏—Ö –ø–∞—É–∑ (–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è/—ç–ª–ª–∏–ø—Å–∏—Å) –¥–ª—è TTS.
    –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥ –≤ TTS.
    """
    lvl = (level or "").upper()
    if lvl in ("C1", "C2"):
        return text  # –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å

    words = (text or "").split()
    if not words:
        return text

    if lvl == "A0":
        step, sep = 2, " ‚Ä¶ "      # –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
    elif lvl == "A1":
        step, sep = 3, ", "
    elif lvl == "A2":
        step, sep = 4, ", "
    elif lvl == "B1":
        step, sep = 6, ", "
    else:  # B2
        step, sep = 8, ", "

    chunks = [" ".join(words[i:i+step]) for i in range(0, len(words), step)]
    slowed = sep.join(chunks).strip()
    if slowed and not slowed.endswith((".", "!", "?")):
        slowed += "."
    return slowed

def _prepare_tts_text(raw: str, level: str, max_len: int = 4000) -> str:
    # 1) –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ (—É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö)
    base = _strip_parenthesized_tail(raw or "")
    # 2) –ù–µ –æ–∑–≤—É—á–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏/–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
    base = _strip_emojis(base)
    # 3) –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é (–¥–ª—è TTS, –∞ –Ω–µ –¥–ª—è —á–∞—Ç–∞)
    base = _slowdown_by_level(base, level)
    # 4) –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –¥–ª—è API
    if len(base) > max_len:
        base = base[:max_len]
    return base

# -------------------- —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ --------------------

def _normalize_style_level(style: str, level: str) -> Tuple[str, str]:
    """
    –ï—Å–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä 'style' –ø–æ –æ—à–∏–±–∫–µ –ø—Ä–∏–ª–µ—Ç–µ–ª —É—Ä–æ–≤–µ–Ω—å (A1..C2),
    –∞ –≤ 'level' ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—É—Å—Ç–æ–π/—á—Ç–æ-—Ç–æ –∏–Ω–æ–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑—Ä—É–ª–∏–º.
    """
    s = (style or "").strip()
    l = (level or "").strip() or "A2"
    if s in _LEVEL_SET:
        # synthesize_voice(..., language_code, level) ‚Äî —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        return "casual", s
    return (s or "casual"), l

# -------------------- –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è TTS --------------------

def synthesize_voice(text: str, language_code: str, style: str = "casual", level: str = "A2") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∑–≤—É—á–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI TTS (tts-1).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .ogg (Opus) ‚Äî –≥–æ—Ç–æ–≤ –¥–ª—è Telegram voice.

    - –≠–º–æ–¥–∑–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–µ–º.
    - –°–∫–æ—Ä–æ—Å—Ç—å/–ø–∞—É–∑—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Ä–æ–≤–Ω—è (A0‚Ä¶C2).
    - –ï—Å–ª–∏ format='opus' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º mp3 –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å ffmpeg) –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ OGG/Opus.
    """
    if not client:
        logger.error("OPENAI_API_KEY is missing for TTS")
        return ""

    style, level = _normalize_style_level(style, level)
    prepared = _prepare_tts_text(text, level)

    style_to_voice = {
        "casual": "alloy",   # üòé —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π
        "business": "fable"  # ü§ì –¥–µ–ª–æ–≤–æ–π
    }
    voice = style_to_voice.get(style.lower(), "alloy")

    logger.info("TTS: voice=%s lang=%s style=%s level=%s", voice, language_code, style, level)

    tmp_path = None
    output_path = None
    try:
        # 1) –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å OGG/Opus ‚Äî —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram voice
        resp = client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=prepared,
            format="opus",   # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë—Ç mp3
        )
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as out_file:
            # –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö SDK —ç—Ç–æ bytes –≤ .content
            data = getattr(resp, "content", None)
            if isinstance(data, (bytes, bytearray)):
                out_file.write(data)
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º .read(), –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π
                if hasattr(resp, "read"):
                    out_file.write(resp.read())
                elif isinstance(resp, (bytes, bytearray)):
                    out_file.write(resp)
                else:
                    raise RuntimeError("TTS opus returned empty/unknown payload")
            tmp_path = out_file.name

        # –û–ø—É—Å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        output_path = tmp_path
        logger.info("TTS done (opus): %s", output_path)
        return output_path

    except Exception:
        logger.exception("[TTS] opus path failed, trying mp3 fallback")

    # 2) –§–æ–ª–±—ç–∫: mp3 ‚Üí –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ffmpeg –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ OGG/Opus
    try:
        resp = client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=prepared,
            format="mp3",
        )
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as out_mp3:
            data = getattr(resp, "content", None)
            if isinstance(data, (bytes, bytearray)):
                out_mp3.write(data)
            elif hasattr(resp, "read"):
                out_mp3.write(resp.read())
            elif isinstance(resp, (bytes, bytearray)):
                out_mp3.write(resp)
            else:
                raise RuntimeError("TTS mp3 returned empty/unknown payload")
            mp3_path = out_mp3.name

        # –ï—Å–ª–∏ –µ—Å—Ç—å ffmpeg ‚Äî –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ ogg/opus (–∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã —á–∞—Ç –ø–æ—Å–ª–∞–ª —Ç–µ–∫—Å—Ç)
        if shutil.which("ffmpeg"):
            ogg_fixed = mp3_path.replace(".mp3", "_fixed.ogg")
            try:
                subprocess.run(
                    ["ffmpeg", "-y", "-i", mp3_path, "-c:a", "libopus", "-b:a", "32k", ogg_fixed],
                    check=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
                # —É–¥–∞–ª–∏–º mp3
                try:
                    os.remove(mp3_path)
                except Exception:
                    pass
                logger.info("TTS reencoded via ffmpeg: %s", ogg_fixed)
                return ogg_fixed
            except subprocess.CalledProcessError:
                logger.warning("FFMPEG reencode failed; dropping to text fallback")
                # —É–ø–∞–¥—ë–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ–ª–±—ç–∫ –Ω–∏–∂–µ
        else:
            logger.warning("ffmpeg not found: cannot convert mp3‚Üíopus for Telegram voice")

        return ""  # –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ogg/opus –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ ‚Äî –∫–æ–¥ –≤—ã—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç

    except Exception:
        logger.exception("[TTS fallback mp3] failed")
        return ""

    finally:
        # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã ‚Äî –ø–æ–¥—á–∏—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        try:
            if tmp_path and output_path and tmp_path != output_path and os.path.exists(tmp_path):
                os.remove(tmp_path)
        except Exception:
            logger.debug("Failed to remove temp TTS raw file")

import os
import tempfile
import subprocess
import logging
from typing import Tuple
from openai import OpenAI
from config.config import OPENAI_API_KEY

logger = logging.getLogger(__name__)

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

_LEVEL_SET = {"A0", "A1", "A2", "B1", "B2", "C1", "C2"}

def _normalize_style_level(style: str, level: str) -> Tuple[str, str]:
    """
    –ï—Å–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä 'style' –ø–æ –æ—à–∏–±–∫–µ –ø—Ä–∏–ª–µ—Ç–µ–ª —É—Ä–æ–≤–µ–Ω—å (A1..C2),
    –∞ –≤ 'level' ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—É—Å—Ç–æ–π/—á—Ç–æ-—Ç–æ –∏–Ω–æ–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑—Ä—É–ª–∏–º.
    """
    s = (style or "").strip()
    l = (level or "").strip() or "A2"
    if s in _LEVEL_SET:
        # –∑–Ω–∞—á–∏—Ç, –≤—ã–∑–æ–≤ –±—ã–ª synthesize_voice(..., language_code, level)
        # –ø–µ—Ä–µ—Å—Ç–∞–≤–∏–º –º–µ—Å—Ç–∞–º–∏: level = s, style = 'casual'
        return "casual", s
    return (s or "casual"), l

def _sanitize_tts_text(text: str, max_len: int = 4000) -> str:
    t = (text or "").strip()
    return t[:max_len] if len(t) > max_len else t

def synthesize_voice(text: str, language_code: str, style: str = "casual", level: str = "A2") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∑–≤—É—á–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI TTS (TTS-1), —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–ª–æ—Å–∞ –ø–æ —Å—Ç–∏–ª—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ .ogg, –≥–æ—Ç–æ–≤–æ–º—É –¥–ª—è Telegram.
    """
    if not client:
        logger.error("OPENAI_API_KEY is missing for TTS")
        return ""

    style, level = _normalize_style_level(style, level)
    text = _sanitize_tts_text(text, max_len=4000)

    style_to_voice = {
        "casual": "alloy",        # üòé –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
        "business": "fable"       # ü§ì –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
    }
    voice = style_to_voice.get(style.lower(), "alloy")

    logger.info("TTS: voice=%s lang=%s style=%s level=%s", voice, language_code, style, level)

    tmp_path = None
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS
        resp = client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=text
        )

        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as out_file:
            out_file.write(resp.content)
            tmp_path = out_file.name

        # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ ffmpeg (–≤–∞–∂–Ω–æ –¥–ª—è Telegram/opus)
        fixed_path = tmp_path.replace(".ogg", "_fixed.ogg")
        try:
            subprocess.run(
                ["ffmpeg", "-y", "-i", tmp_path, "-c:a", "libopus", fixed_path],
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
            )
        except subprocess.CalledProcessError as e:
            logger.exception("FFMPEG reencode failed")
            # –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π tmp_path ‚Äî Telegram –æ–±—ã—á–Ω–æ –∫—É—à–∞–µ—Ç ogg, –Ω–æ —Ö—É–∂–µ
            return tmp_path or ""

        logger.info("TTS done: %s", fixed_path)
        return fixed_path

    except Exception:
        logger.exception("[TTS Error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏")
        return ""
    finally:
        # –ß–∏—Å—Ç–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ)
        try:
            if tmp_path and os.path.exists(tmp_path):
                os.remove(tmp_path)
        except Exception:
            logger.debug("Failed to remove temp TTS file (raw)")

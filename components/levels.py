from telegram import InlineKeyboardMarkup, InlineKeyboardButton

LEVELS = {
    "A0": "Starter",
    "A1": "Beginner",
    "A2": "Beginner",
    "B1": "Intermediate",
    "B2": "Intermediate",
    "C1": "Advanced",
    "C2": "Advanced",
}


def get_level_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üü¢ A0 ‚Äî Starter", callback_data="level_A0")],
        [InlineKeyboardButton("üü¢ A1‚ÄìA2 ‚Äî Beginner", callback_data="level_A1A2")],
        [InlineKeyboardButton("üü° B1‚ÄìB2 ‚Äî Intermediate", callback_data="level_B1B2")],
        [InlineKeyboardButton("üîµ C1‚ÄìC2 ‚Äî Advanced", callback_data="level_C1C2")],
    ]
    return InlineKeyboardMarkup(keyboard)


LEVEL_PROMPT = {
    "en": "üìä Now choose your current level of the language you're learning:",
    "ru": "üìä –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∏–∑—É—á–∞–µ–º—ã–º —è–∑—ã–∫–æ–º:",
    "sv": "üìä V√§lj nu din nuvarande spr√•kniv√•:"  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —à–≤–µ–¥—Å–∫–æ–≥–æ
}


def get_rules_by_level(level: str, interface_lang: str) -> str:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ GPT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    translations = {
        "en": {
            "A0": "Use the simplest possible grammar and short phrases. Translate everything you say into English.",
            "A1": "Use simple grammar and short paragraphs. Translate into English only when the user asks.",
            "B1": "Use more advanced grammar and full sentences. Translate only if explicitly requested.",
            "C1": "Communicate fluently as with a native speaker. Translate only on request."
        },
        "ru": {
            "A0": "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã. –ü–µ—Ä–µ–≤–æ–¥–∏ –≤—Å—ë, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å, –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
            "A1": "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "B1": "–ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
            "C1": "–û–±—â–∞–π—Å—è –∫–∞–∫ –Ω–µ–π—Ç–∏–≤. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É."
        },
        "sv": {
            "A0": "Anv√§nd den enklaste grammatiken och korta fraser. √ñvers√§tt allt du s√§ger till svenska.",
            "A1": "Anv√§nd enkel grammatik och korta stycken. √ñvers√§tt till svenska endast p√• beg√§ran.",
            "B1": "Anv√§nd mer avancerad grammatik och kompletta meningar. √ñvers√§tt bara om anv√§ndaren uttryckligen ber om det.",
            "C1": "Tala flytande som en inf√∂dd. √ñvers√§tt endast p√• beg√§ran."
        }
    }

    lang = interface_lang.lower()
    level_key = level.upper()

    if lang in translations and level_key[:2] in translations[lang]:
        return translations[lang][level_key[:2]]
    elif "en" in translations and level_key[:2] in translations["en"]:
        return translations["en"][level_key[:2]]
    return ""

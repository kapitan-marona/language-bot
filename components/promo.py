# components/promo.py
from __future__ import annotations
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–∫–ª—é—á–∏ ‚Äî –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
PROMO_CODES: Dict[str, Dict[str, Any]] = {
    "1709":    {"type": "permanent",    "days": None},
    "–¥—Ä—É–≥":    {"type": "timed",        "days": 3},
    "friend":  {"type": "timed",        "days": 3},
    "western": {"type": "english_only", "days": None},
    # üéì Frau ‚Äî –¥–æ 26.10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç DE/EN
    "frau":    {"type": "timed",        "days": None, "expires_at": "2025-10-26"},
}

# ============== –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–º–æ-–ª–æ–≥–∏–∫–∏ ==============

def normalize_code(code: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)."""
    return (code or "").strip().lower()

def _expiry_eod_utc(date_str: str) -> Optional[datetime]:
    """
    –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º YYYY-MM-DD –∫–∞–∫ '–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è' (23:59:59 UTC).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º aware-–¥–∞—Ç—É –≤ UTC.
    """
    try:
        d = datetime.fromisoformat(date_str)  # date-only: 00:00
        # –∫–æ–Ω–µ—Ü –¥–Ω—è UTC
        return datetime(d.year, d.month, d.day, 23, 59, 59, tzinfo=timezone.utc)
    except Exception:
        return None

def check_promo_code(code: str, profile: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞) —Å —É—á—ë—Ç–æ–º expires_at.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ {'type': ..., 'days': ..., ...} –ª–∏–±–æ None.
    (–ê—Ä–≥—É–º–µ–Ω—Ç profile –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏.)
    """
    key = normalize_code(code)
    info = PROMO_CODES.get(key)
    if not info:
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å expires_at)
    exp = info.get("expires_at")
    if exp:
        exp_eod = _expiry_eod_utc(exp)
        if exp_eod and datetime.now(timezone.utc) > exp_eod:
            return None  # –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫

    return info

def activate_promo(profile: Dict[str, Any], code: str) -> tuple[bool, str]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ-–ø–∏—Ç–æ–Ω–æ–≤—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î).
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç:
      - promo_code_used, promo_type, promo_activated_at, promo_days
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, reason):
      - (True, '<type>') –ø—Ä–∏ —É—Å–ø–µ—Ö–µ;
      - (False, 'invalid') –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω/–∏—Å—Ç—ë–∫;
      - (False, 'already_used') –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
    """
    if not isinstance(profile, dict):
        return False, "invalid"

    # —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª—é–±–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–µ–ª—å–∑—è
    if profile.get("promo_code_used"):
        return False, "already_used"

    info = check_promo_code(code)
    if not info:
        return False, "invalid"

    promo_type = info.get("type")
    days = info.get("days")

    profile["promo_code_used"] = normalize_code(code)
    profile["promo_type"] = promo_type
    profile["promo_activated_at"] = datetime.now(timezone.utc).isoformat()
    profile["promo_days"] = int(days) if isinstance(days, int) else None

    return True, str(promo_type or "")

def is_promo_valid(profile: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.
    - permanent / english_only ‚Äî –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã.
    - timed ‚Äî –∞–∫—Ç–∏–≤–µ–Ω –ø–æ –ø—Ä–∞–≤–∏–ª—É:
        * –µ—Å–ª–∏ —É –∫–æ–¥–∞ –∑–∞–¥–∞–Ω expires_at ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è, UTC);
        * –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º (activated_at + promo_days).
    """
    if not isinstance(profile, dict):
        return False

    ptype = profile.get("promo_type")
    if not ptype:
        return False

    if ptype in ("permanent", "english_only"):
        return True

    if ptype == "timed":
        # –µ—Å–ª–∏ —É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –µ—Å—Ç—å –∂—ë—Å—Ç–∫–∏–π –¥–µ–¥–ª–∞–π–Ω ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ–º—É
        code = normalize_code(profile.get("promo_code_used") or "")
        info = PROMO_CODES.get(code) or {}
        exp = info.get("expires_at")
        if exp:
            exp_eod = _expiry_eod_utc(exp)
            if exp_eod:
                return datetime.now(timezone.utc) <= exp_eod

        # fallback: –æ–±—ã—á–Ω—ã–µ "days" –æ—Ç –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        iso = profile.get("promo_activated_at")
        days = profile.get("promo_days")
        if not iso or not days:
            return False
        try:
            activated = datetime.fromisoformat(str(iso).replace("Z", "+00:00"))
            if activated.tzinfo is None:
                activated = activated.replace(tzinfo=timezone.utc)
        except Exception:
            return False
        end = activated + timedelta(days=int(days))
        return datetime.now(timezone.utc) <= end

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
    return False

def restrict_target_languages_if_needed(profile: Dict[str, Any],
                                        lang_map: Dict[str, str]) -> Dict[str, str]:
    """
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–º–æ.
    - english_only  ‚Üí —Ç–æ–ª—å–∫–æ 'en'
    - frau          ‚Üí —Ç–æ–ª—å–∫–æ 'de' –∏ 'en' (–µ—Å–ª–∏ –µ—â—ë –≤–∞–ª–∏–¥–µ–Ω)
    """
    if not isinstance(lang_map, dict) or not isinstance(profile, dict):
        return lang_map

    promo_type = profile.get("promo_type")
    promo_code = normalize_code(profile.get("promo_code_used") or "")

    if promo_type == "english_only" and is_promo_valid(profile):
        return {"en": lang_map["en"]} if "en" in lang_map else {}

    if promo_code == "frau" and is_promo_valid(profile):
        allowed = {"de", "en"}
        return {k: v for k, v in lang_map.items() if k in allowed}

    return lang_map

# ============== UI-—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è /promo ==============

def _days_word_ru(n: int) -> str:
    n = abs(n) % 100
    if 11 <= n <= 14:
        return "–¥–Ω–µ–π"
    last = n % 10
    if last == 1:
        return "–¥–µ–Ω—å"
    if 2 <= last <= 4:
        return "–¥–Ω—è"
    return "–¥–Ω–µ–π"

def _days_word_en(n: int) -> str:
    return "day" if abs(n) == 1 else "days"

def format_promo_status_for_user(profile: dict, lang: str = "ru") -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ ru|en:
      –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ü—Ä–æ–º–æ–∫–æ–¥ {code}:" / "Promo code {code}:"
      + —Ç–µ–ª–æ (permanent / english_only / timed / frau / not_active)
    """
    from components.promo_texts import PROMO_HEADER_TPL, PROMO_DETAILS

    lang = "en" if lang == "en" else "ru"

    code_used = normalize_code(profile.get("promo_code_used") or "")
    ptype = (profile.get("promo_type") or "").strip()
    days_total = profile.get("promo_days")
    iso = profile.get("promo_activated_at")

    # –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    if not ptype:
        return PROMO_DETAILS[lang]["not_active"]

    header = PROMO_HEADER_TPL[lang].format(code=code_used or "").strip()

    # frau ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫
    if code_used == "frau":
        info = PROMO_CODES.get("frau", {})
        exp = info.get("expires_at")
        exp_eod = _expiry_eod_utc(exp) if exp else None
        if exp_eod and datetime.now(timezone.utc) > exp_eod:
            return PROMO_DETAILS[lang]["not_active"]
        # –í PROMO_DETAILS –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª—é—á 'frau' (ru/en) ‚Äî –º—ã –µ–≥–æ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–∞–Ω—å—à–µ
        return f"{header}\n{PROMO_DETAILS[lang]['frau']}"

    # –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ
    if ptype == "permanent":
        return f"{header}\n{PROMO_DETAILS[lang]['permanent_all']}"
    if ptype == "english_only":
        return f"{header}\n{PROMO_DETAILS[lang]['english_only']}"

    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if ptype == "timed":
        # –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω —É –∫–æ–¥–∞ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ
        info = PROMO_CODES.get(code_used) or {}
        exp = info.get("expires_at")
        exp_eod = _expiry_eod_utc(exp) if exp else None
        if exp_eod:
            now = datetime.now(timezone.utc)
            if now > exp_eod:
                return PROMO_DETAILS[lang]["not_active"]
            # —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            days_left = ((exp_eod - now).total_seconds() + 86399) // 86400
            days_left = int(max(1, days_left))
            dw = _days_word_en(days_left) if lang == "en" else _days_word_ru(days_left)
            body = PROMO_DETAILS[lang]["timed_generic"].format(days=days_left, days_word=dw)
            return f"{header}\n{body}"

        # –∏–Ω–∞—á–µ ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å days –æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        if not iso or not days_total:
            body = PROMO_DETAILS[lang]["timed_generic"].format(
                days="?", days_word=_days_word_en(2) if lang == "en" else _days_word_ru(2)
            )
            return f"{header}\n{body}"
        try:
            dt = datetime.fromisoformat(str(iso).replace("Z", "+00:00"))
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
        except Exception:
            body = PROMO_DETAILS[lang]["timed_generic"].format(
                days="?", days_word=_days_word_en(2) if lang == "en" else _days_word_ru(2)
            )
            return f"{header}\n{body}"

        now = datetime.now(timezone.utc)
        end = dt + timedelta(days=int(days_total))
        left_seconds = int((end - now).total_seconds())
        if left_seconds <= 0:
            return PROMO_DETAILS[lang]["not_active"]

        days_left = (left_seconds + 86399) // 86400  # ceil –¥–æ –¥–Ω–µ–π
        dw = _days_word_en(days_left) if lang == "en" else _days_word_ru(days_left)
        body = PROMO_DETAILS[lang]["timed_generic"].format(days=int(days_left), days_word=dw)
        return f"{header}\n{body}"

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
    return f"{header}\n{PROMO_DETAILS[lang]['unknown_type']}"

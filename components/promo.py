from __future__ import annotations
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
PROMO_CODES: Dict[str, Dict[str, Any]] = {
    "1709":   {"type": "permanent",     "days": None},
    "–¥—Ä—É–≥":   {"type": "timed",         "days": 3},
    "friend": {"type": "timed",         "days": 3},
    "western":{"type": "english_only",  "days": None},
    # üéì Frau ‚Äî —Å–ø–µ—Ü–∫–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —à–∫–æ–ª—ã Deutsch mit Frau Kloppertants
    "frau":   {"type": "timed",         "days": None, "expires_at": "2025-10-26"},
}

def normalize_code(code: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)."""
    return (code or "").strip().lower()

def check_promo_code(code: str, profile: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ {'type': ..., 'days': ...} –ª–∏–±–æ None.
    """
    info = PROMO_CODES.get(normalize_code(code))
    if not info:
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å expires_at)
    exp = info.get("expires_at")
    if exp:
        try:
            exp_date = datetime.fromisoformat(exp).replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) > exp_date:
                return None  # –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫
        except Exception:
            pass

    return info

def activate_promo(profile: Dict[str, Any], code: str) -> tuple[bool, str]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ-–ø–∏—Ç–æ–Ω–æ–≤—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, reason):
      - (True, '<type>') –ø—Ä–∏ —É—Å–ø–µ—Ö–µ;
      - (False, 'invalid') –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω;
      - (False, 'already_used') –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ;
    """
    if not isinstance(profile, dict):
        return False, "invalid"

    # —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    if profile.get("promo_code_used"):
        # –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π ‚Äî –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä
        if normalize_code(profile["promo_code_used"]) == normalize_code(code):
            return False, "already_used"
        return False, "already_used"

    info = check_promo_code(code)
    if not info:
        return False, "invalid"

    promo_type = info.get("type")
    days = info.get("days")

    profile["promo_code_used"] = normalize_code(code)
    profile["promo_type"] = promo_type
    profile["promo_activated_at"] = datetime.now(timezone.utc).isoformat()
    profile["promo_days"] = int(days) if isinstance(days, int) else None

    return True, str(promo_type or "")

def is_promo_valid(profile: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.
    permanent / english_only ‚Äî —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–µ–∑ —Å—Ä–æ–∫–∞.
    timed ‚Äî –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –Ω–µ –∏—Å—Ç—ë–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
    """
    if not isinstance(profile, dict):
        return False

    ptype = profile.get("promo_type")
    if not ptype:
        return False

    if ptype in ("permanent", "english_only"):
        return True

    if ptype == "timed":
        iso = profile.get("promo_activated_at")
        days = profile.get("promo_days")
        if not iso and not days:
            return False

        # –µ—Å–ª–∏ —É –∫–æ–¥–∞ –∑–∞–¥–∞–Ω expires_at ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ
        code = profile.get("promo_code_used")
        info = PROMO_CODES.get(code)
        if info and info.get("expires_at"):
            try:
                exp_date = datetime.fromisoformat(info["expires_at"]).replace(tzinfo=timezone.utc)
                return datetime.now(timezone.utc) <= exp_date
            except Exception:
                pass

        if not iso or not days:
            return False
        try:
            activated = datetime.fromisoformat(iso)
            if activated.tzinfo is None:
                activated = activated.replace(tzinfo=timezone.utc)
        except Exception:
            return False
        end = activated + timedelta(days=int(days))
        return datetime.now(timezone.utc) <= end

    return False

def restrict_target_languages_if_needed(profile: Dict[str, Any],
                                        lang_map: Dict[str, str]) -> Dict[str, str]:
    """
    –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω english_only ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏–∑ lang_map.
    –ï—Å–ª–∏ Frau ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    """
    if not isinstance(lang_map, dict) or not isinstance(profile, dict):
        return lang_map

    promo_type = profile.get("promo_type")
    promo_code = profile.get("promo_code_used")

    if promo_type == "english_only" and is_promo_valid(profile):
        return {"en": lang_map["en"]} if "en" in lang_map else {}

    if normalize_code(promo_code) == "frau" and is_promo_valid(profile):
        allowed = ["de", "en"]
        return {k: v for k, v in lang_map.items() if k in allowed}

    return lang_map
